#+title: Config
#+startup: showeverything
options: toc:2
#+property: header-args :tangle yes

* Table of content :toc:
- [[#common][Common]]
  - [[#comments-face][Comments face]]
  - [[#username][Username]]
- [[#auto-save][Auto save]]
- [[#company][Company]]
- [[#cursor][Cursor]]
- [[#doom-modeline][Doom-modeline]]
- [[#font][Font]]
- [[#ibuffer][Ibuffer]]
- [[#ivy][Ivy]]
- [[#json][JSON]]
- [[#keybindings][Keybindings]]
- [[#line-numbers][Line numbers]]
- [[#lsp][LSP]]
- [[#opacity][Opacity]]
- [[#org][Org]]
  - [[#org-agenda][Org-agenda]]
  - [[#org-directory][Org-directory]]
  - [[#org-modern][Org-modern]]
- [[#scroll][Scroll]]
- [[#tabs][Tabs]]
- [[#theme][Theme]]
- [[#tramp][Tramp]]
- [[#treemacs][Treemacs]]
- [[#vertico][Vertico]]
- [[#ws-butler][Ws-butler]]

* Common
Whenever you reconfigure a package, make sure to wrap your config in an `after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k'). This will open documentation for it, including demos of how they are used. Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.

** Comments face

#+begin_src emacs-lisp
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

** Username
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.

#+begin_src emacs-lisp
(setq user-full-name "Vladimir Kosteley"
      user-mail-address "cz@cqz.me")
#+end_src

* Auto save
Use super-save instead of default

#+begin_src emacs-lisp
(setq auto-save-default nil)
#+end_src

#+begin_src emacs-lisp
(use-package! super-save
  :ensure t
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t))
#+end_src

* Company

#+begin_src emacs-lisp
(after! company
  (setq
    company-idle-delay 0
    company-minimum-prefix-length 1)
  (add-to-list 'company-frontends 'company-preview-frontend))

(setq +company-backend-alist '(
                               (conf-mode (:separate company-files :separate company-capf :separate company-dabbrev-code company-dabbrev :separate company-yasnippet))
                               (prog-mode (:separate company-files :separate company-capf :with company-yasnippet :separate company-dabbrev-code))
                               ;; (terraform-mode (:separate company-files :separate company-terraform :with company-yasnippet))
                               (text-mode (:separate company-files :separate company-capf :separate company-dabbrev-code company-dabbrev :separate company-ispell :separate company-yasnippet))))

(after! terraform-mode
  (set-company-backend! 'terraform-mode '(:separate company-files :separate company-terraform :with company-yasnippet)))

(global-set-key (kbd "C-c C-/") #'company-other-backend)
#+end_src

* Cursor

#+begin_src emacs-lisp
;; (setq-default cursor-type 'bar)
(blink-cursor-mode)
#+end_src

* Doom-modeline
Enable extra icons in doom-modeline

#+begin_src emacs-lisp
(after! doom-modeline
  (setq doom-modeline-enable-word-count t
        doom-modeline-persp-name t
        doom-modeline-persp-icon t
        doom-modeline-major-mode-icon t))
#+end_src

* Font
Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they accept. For example:

setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
     doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))

If you or Emacs can't find your font, use 'M-x describe-font' to look them up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to refresh your font settings. If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "FiraCode Nerd Font Mono" :size 14.0)
      doom-variable-pitch-font (font-spec :family "JetBrainsMonoNL Nerd Font" :size 14.0)
      doom-big-font (font-spec :family "FiraCode Nerd Font Mono" :size 22.0)
      ;; doom-unicode-font (font-spec :family "Iosevka Nerd Font Mono" :size 13.0)
      )
#+end_src

* Ibuffer

#+begin_src emacs-lisp
(add-hook! ibuffer
  (ibuffer-projectile-set-filter-groups)
  (unless (eq ibuffer-sorting-mode 'alphabetic)
    (ibuffer-do-sort-by-alphabetic)))
#+end_src

* Ivy

#+begin_src emacs-lisp
(after! ivy
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq +ivy-buffer-preview 'everything))
#+end_src

* JSON

#+begin_src emacs-lisp
;; (setq-hook! 'json-mode-hook +format-with-lsp nil)
#+end_src

* Keybindings

*** Avy

#+begin_src emacs-lisp
(global-set-key (kbd "M-s s") 'avy-goto-char-timer)
#+end_src

*** Buffers

#+begin_src emacs-lisp
(global-set-key (kbd "C-c <") 'previous-buffer)
(global-set-key (kbd "C-c >") 'next-buffer)
#+end_src

*** Delete word, backward delete word

#+begin_src emacs-lisp
(defun ismd/delete-word (arg)
  "Delete characters until encountering the end of a word.
With argument ARG, do this that many times."
  (interactive "p")
  (delete-region (point) (progn (forward-word arg) (point))))

(defun ismd/backward-delete-word (arg)
  "Delete characters backward until encountering the beginning of a word.
With argument ARG, do this that many times."
  (interactive "p")
  (delete-region (point) (progn (backward-word arg) (point))))

;; (global-set-key (kbd "M-d") 'ismd/delete-word)
;; (global-set-key (kbd "M-<backspace>") 'ismd/backward-delete-word)
#+end_src

*** Dired

#+begin_src emacs-lisp
(defun ismd/dired-up-dir ()
  "Go up a directory."
  (interactive)
  (let ((current-dir (dired-current-directory)))
    (find-alternate-file "..")
    (dired-goto-file current-dir)))

(map! :map dired-mode-map "<backspace>" #'ismd/dired-up-dir)
#+end_src

*** Indent rigidly

#+begin_src emacs-lisp
(map! :map indent-rigidly-map "b" #'indent-rigidly-left)
(map! :map indent-rigidly-map "f" #'indent-rigidly-right)
(map! :map indent-rigidly-map "B" #'indent-rigidly-left-to-tab-stop)
(map! :map indent-rigidly-map "F" #'indent-rigidly-right-to-tab-stop)
#+end_src

*** Kill line

#+begin_src emacs-lisp
(defun ismd/kill-line ()
  (interactive)
  (cond ((ismd/current-line-empty-p) (delete-char 1))
    (t (delete-region (point) (line-end-position)))))

(defun ismd/current-line-empty-p ()
  (save-excursion
    (beginning-of-line)
    (looking-at "[[:space:]]*$")))

;; (global-set-key (kbd "C-k") 'ismd/kill-line)
#+end_src

*** Move cursor with M-n and M-p

#+begin_src emacs-lisp
(global-set-key (kbd "M-n") "\C-u3\C-v")
(global-set-key (kbd "M-p") "\C-u3\M-v")
#+end_src

*** Search buffer

#+begin_src emacs-lisp
(global-set-key (kbd "C-s") '+default/search-buffer)
#+end_src

*** Tabs

#+begin_src emacs-lisp
;; (global-set-key (kbd "C-<iso-lefttab>") 'centaur-tabs-backward-tab)
;; (global-set-key (kbd "C-<tab>") 'centaur-tabs-forward-tab)
;; (global-set-key (kbd "C-<") 'centaur-tabs-move-current-tab-to-left)
;; (global-set-key (kbd "C->") 'centaur-tabs-move-current-tab-to-right)
#+end_src

*** Winum select window

#+begin_src emacs-lisp
(global-set-key (kbd "M-0") 'treemacs-select-window)
(global-set-key (kbd "M-1") 'winum-select-window-1)
(global-set-key (kbd "M-2") 'winum-select-window-2)
(global-set-key (kbd "M-3") 'winum-select-window-3)
(global-set-key (kbd "M-4") 'winum-select-window-4)
(global-set-key (kbd "M-5") 'winum-select-window-5)
(global-set-key (kbd "M-6") 'winum-select-window-6)
(global-set-key (kbd "M-7") 'winum-select-window-7)
(global-set-key (kbd "M-8") 'winum-select-window-8)
(global-set-key (kbd "M-9") 'winum-select-window-9)
#+end_src

*** Workspaces swap

#+begin_src emacs-lisp
(global-set-key (kbd "C-c w <") '+workspace/swap-left)
(global-set-key (kbd "C-c w >") '+workspace/swap-right)
#+end_src

* Line numbers
This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src emacs-lisp
(setq display-line-numbers-type t)
(global-visual-line-mode t)
;; (+global-word-wrap-mode +1)
#+end_src

* LSP

#+begin_src emacs-lisp
(use-package! lsp-mode
  :init
  (setq lsp-enable-symbol-highlighting t
        lsp-lens-enable t
        lsp-headerline-breadcrumb-enable t
        lsp-modeline-code-actions-enable t
        lsp-diagnostics-provider :flycheck
        lsp-completion-show-detail t
        lsp-completion-show-kind t))

(use-package! lsp-ui
  :init
  (setq ;; lsp-ui-doc-enable t
   lsp-ui-imenu-enable t
   lsp-ui-sideline-enable t))
#+end_src

* Opacity

Doom style
#+begin_src emacs-lisp
;; (doom/set-frame-opacity 50)
#+end_src

New emacs 29 style
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 50))
#+end_src

* Org

#+begin_src emacs-lisp
(setq calendar-week-start-day 1)
(setq org-startup-with-inline-images t
      org-startup-with-latex-preview t)
#+end_src

** Org-agenda

#+begin_src emacs-lisp
(setq org-fancy-priorities-list '("⚡" "☝" "⚑")
      org-agenda-block-separator 8411)

(setq org-agenda-custom-commands
      '(("v" "A better agenda view"
         ((tags "work"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Work tasks:")))
          (tags "private"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Private tasks:")))
          (agenda "")))))
#+end_src

** Org-directory
If you use `org' and don't want your org files in the default location below, change `org-directory'. It must be set before org loads!

#+begin_src emacs-lisp
(setq org-directory "~/org/")
#+end_src

** Org-modern

#+begin_src emacs-lisp
(with-eval-after-load 'org (global-org-modern-mode))
#+end_src

* Scroll

#+begin_src emacs-lisp
(pixel-scroll-precision-mode)
#+end_src

* Tabs

#+begin_src emacs-lisp
(after! centaur-tabs
  (centaur-tabs-group-by-projectile-project)
  (centaur-tabs-headline-match)
  (setq
   centaur-tabs-gray-out-icons 'buffer
   centaur-tabs-set-bar 'left
   centaur-tabs-set-icons t
   centaur-tabs-show-count t
   centaur-tabs-show-new-tab-button nil
   ;; centaur-tabs-adjust-buffer-order t
   x-underline-at-descent-line t
   ))
#+end_src

* Theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:

#+begin_src emacs-lisp
(setq doom-theme 'doom-oceanic-next)
;; (setq doom-theme 'doom-rouge)
;; (setq doom-theme 'doom-meltbus)
;; (setq doom-theme 'deeper-blue)
;; (setq doom-theme 'modus-operandi)
;; (setq doom-theme 'modus-operandi-tritanopia)
#+end_src

* Tramp

#+begin_src emacs-lisp
(setq tramp-terminal-type "tramp")
#+end_src

* Treemacs

#+begin_src emacs-lisp
(add-hook! treemacs-mode
  (treemacs-follow-mode))
#+end_src

* Vertico

#+begin_src emacs-lisp
;; (after! vertico
;;   (setq vertico-cycle nil))
#+end_src

* Ws-butler

#+begin_src emacs-lisp
(after! ws-butler
  (add-to-list 'ws-butler-global-exempt-modes 'org-mode))
#+end_src
