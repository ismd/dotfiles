#+TITLE: GNU Emacs Config
#+AUTHOR: Vladimir Kosteley
#+DESCRIPTION: Personal Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#adding-the-scripts-directory-to-path][Adding the scripts directory to path]]
  - [[#sourcing-the-scripts][Sourcing the scripts]]
  - [[#custom-file][Custom File]]
  - [[#fullscreen][Fullscreen]]
  - [[#themes][Themes]]
- [[#ai][AI]]
  - [[#ellama][Ellama]]
  - [[#gptel][GPTEL]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#backup][BACKUP]]
- [[#company][COMPANY]]
- [[#consult][CONSULT]]
  - [[#embark-consult][Embark Consult]]
- [[#copilot][COPILOT]]
- [[#corfu][CORFU]]
  - [[#cape][CAPE]]
- [[#dashboard][DASHBOARD]]
- [[#delete-word-and-line][DELETE WORD AND LINE]]
- [[#diminish][DIMINISH]]
- [[#dirvish][DIRVISH]]
- [[#ediff][EDIFF]]
- [[#editorconfig][EDITORCONFIG]]
- [[#embark][EMBARK]]
- [[#expand-region][EXPAND REGION]]
- [[#flutter][FLUTTER]]
- [[#flycheck][FLYCHECK]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#general-keybindings][GENERAL KEYBINDINGS]]
- [[#git-programs][GIT PROGRAMS]]
  - [[#diff-hl][Diff Hl]]
  - [[#git-time-machine][Git Time Machine]]
  - [[#magit][Magit]]
- [[#highlight-indent-guides][HIGHLIGHT INDENT GUIDES]]
- [[#highlight-todo][HIGHLIGHT TODO]]
- [[#hippie-expand][HIPPIE EXPAND]]
- [[#ibuffer][IBUFFER]]
  - [[#ibuffer-project][Ibuffer Project]]
  - [[#ibuffer-projectile][Ibuffer Projectile]]
- [[#kubernetes][KUBERNETES]]
- [[#language-support][LANGUAGE SUPPORT]]
  - [[#dart][Dart]]
  - [[#json][JSON]]
  - [[#markdown][Markdown]]
  - [[#terraform][Terraform]]
  - [[#yaml][YAML]]
- [[#lsp][LSP]]
- [[#marginalia][MARGINALIA]]
- [[#minibuffer-escape][MINIBUFFER ESCAPE]]
- [[#modeline][MODELINE]]
- [[#move-where-i-mean][MOVE WHERE I MEAN]]
- [[#multiple-cursors][MULTIPLE CURSORS]]
- [[#nerd-icons][NERD ICONS]]
  - [[#nerd-icons-completion][Nerd Icons Completion]]
  - [[#nerd-icons-corfu][Nerd Icons Corfu]]
  - [[#nerd-icons-ibuffer][Nerd Icons Ibuffer]]
- [[#orderless][ORDERLESS]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#org-todo][Org TODO]]
- [[#persistent-scratch][PERSISTENT SCRATCH]]
- [[#persp-mode][PERSP MODE]]
  - [[#persp-mode-projectile-bridge][Persp Mode Projectile Bridge]]
- [[#popwin][POPWIN]]
- [[#project][PROJECT]]
- [[#projectile][PROJECTILE]]
- [[#protobuf][PROTOBUF]]
- [[#rainbow-delimiters][RAINBOW DELIMITERS]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#ripgrep][RIPGREP]]
- [[#sane-defaults][SANE DEFAULTS]]
  - [[#scroll][Scroll]]
  - [[#tab-bar][Tab Bar]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm Toggle]]
- [[#starting-the-daemon][STARTING THE DAEMON]]
- [[#sudo-edit][SUDO EDIT]]
- [[#super-save][SUPER SAVE]]
- [[#tabspaces][TABSPACES]]
- [[#tldr][TLDR]]
- [[#transparency][TRANSPARENCY]]
- [[#tree-sitter][TREE SITTER]]
  - [[#treesit-auto][Treesit Auto]]
  - [[#ts-fold][Ts Fold]]
- [[#treemacs][TREEMACS]]
- [[#trimming-whitespace][TRIMMING WHITESPACE]]
- [[#vertico][VERTICO]]
  - [[#vertico-posframe][Vertico Posframe]]
- [[#vuiet][VUIET]]
  - [[#lastfm][Last.fm]]
- [[#xref][XREF]]
- [[#which-key][WHICH-KEY]]
- [[#window-numbering][WINDOW NUMBERING]]
- [[#workspaces][WORKSPACES]]

* IMPORTANT PROGRAMS TO LOAD FIRST
To keep this =config.org= a reasonable length, I have moved a lot of code to individual scripts that will be sourced by this config.  These scripts are found in "~/.config/emacs/scripts" and do not contain any code that most people are likely to need to edit.

** Adding the scripts directory to path

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs/scripts/")
#+end_src

** Sourcing the scripts

#+begin_src emacs-lisp
(require 'elpaca-setup) ;; The Elpaca Package Manager
(require 'buffer-move)  ;; Buffer-move for better window management
#+end_src

** Custom File

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "customs.el" user-emacs-directory))
(add-hook 'elpaca-after-init-hook (lambda () (load custom-file 'noerror)))

(setq cz/custom-file (expand-file-name "custom.el" user-emacs-directory))
(add-hook 'elpaca-after-init-hook (lambda () (load cz/custom-file 'noerror)))
#+end_src

** Fullscreen

#+begin_src emacs-lisp
(toggle-frame-fullscreen)
#+end_src

** Themes

#+begin_src emacs-lisp
(org-babel-load-file
  (expand-file-name
    "scripts/themes.org"
    user-emacs-directory))
#+end_src

* AI

** Ellama
https://github.com/s-kostyaev/ellama

#+begin_src emacs-lisp
(use-package ellama
  :ensure t
  :init
  (setopt ellama-language "English")
  (require 'llm-ollama)
  (setopt ellama-provider
          (make-llm-ollama
           :chat-model "codellama:34b-code"
           :embedding-model "codellama")))
#+end_src

** GPTEL
https://github.com/karthink/gptel

#+begin_src emacs-lisp
(use-package gptel
  :ensure t
  :config
  (setq-default gptel-model "llama2:latest"
                gptel-backend (gptel-make-ollama "Ollama"
                                :host "localhost:11434"
                                :stream t
                                ;; codebooga - seems like it is very slow but may be good for coding
                                ;; llama2 - good enough
                                ;; magicoder - commit messages are bad
                                ;; mistral - seems bad and slow
                                ;; wizardcoder - good enough for coding
                                :models '("codebooga:latest" "llama2:latest" "magicoder:latest" "mistral:latest" "wizardcoder:latest")))
  (add-to-list 'gptel-directives '(message-commit . "I want you to act as a commit message generator. Generate a commit message for me using the diff which I provide. Generate only for lines which are added or removed. Sign '+' at the start of the line means that the line was added and '-' means that the line was removed. Do not write any explanations or other words, just reply with the commit message.")))
#+end_src

* ALL THE ICONS
#+begin_quote
Currently using =nerd-icons= instead of =all-the-icons=.
#+end_quote

This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
  
#+begin_src emacs-lisp
;; (use-package all-the-icons
;;   :ensure t
;;   :if (display-graphic-p))

;; (use-package all-the-icons-dired
;;   :ensure t
;;   :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* BACKUP 
By default, Emacs creates automatic backups of files in their original directories, such "file.el" and the backup "file.el~".  This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =TRASH= directory.

#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src

* COMPANY
#+begin_quote
Currently using =corfu= instead of =company=.
#+end_quote

[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
;; (use-package company
;;   :ensure t
;;   :defer 2
;;   :diminish
;;   :custom
;;   (company-begin-commands '(self-insert-command))
;;   (company-idle-delay .1)
;;   (company-minimum-prefix-length 2)
;;   (company-show-numbers t)
;;   (company-tooltip-align-annotations 't)
;;   (global-company-mode t))

;; (use-package company-box
;;   :after company
;;   :diminish
;;   :hook (company-mode . company-box-mode))
#+end_src

* CONSULT
https://github.com/minad/consult

#+begin_src emacs-lisp
(use-package consult
  :ensure t

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
  )
#+end_src

** Embark Consult

#+begin_src emacs-lisp
(use-package embark-consult
  :ensure t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* COPILOT

#+begin_src emacs-lisp
(use-package jsonrpc
  :ensure t)

(use-package copilot
  :after editorconfig jsonrpc
  :ensure (:host github :repo "copilot-emacs/copilot.el" :files ("*.el" "dist"))
  :hook
  (prog-mode . copilot-mode)
  (text-mode . copilot-mode)
  (copilot-mode . (lambda ()
                    (setq-local copilot--indent-warning-printed-p t))))
#+end_src

* CORFU
https://github.com/minad/corfu

#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode))
#+end_src

** CAPE
https://github.com/minad/cape

Seems like LSP works well and I don't need this.

* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "/home/cz/Yandex.Disk/Pictures/avatar.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-projects-backend 'project-el)
  (setq dashboard-items '((recents . 5)
                          ;; (agenda . 5 )
                          ;; (bookmarks . 5)
                          (projects . 5)
                          (registers . 5)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
  (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
  (dashboard-setup-startup-hook))
#+end_src

* DELETE WORD AND LINE

#+begin_src emacs-lisp
;; Delete word
(defun cz/delete-word (arg)
  "Delete characters forward until encountering the end of a word.
With argument ARG, do this that many times."
  (interactive "p")
  (delete-region (point) (progn (forward-word arg) (point))))

;; Delete word backward
(defun cz/delete-word-backward (arg)
  "Delete characters backward until encountering the end of a word.
With argument ARG, do this that many times."
  (interactive "p")
  (cz/delete-word (- arg)))

;; Delete line
(defun cz/delete-line ()
  "Delete text from current position to end of line char.
If at end of line, delete the following newline char."
  (interactive)
  (let ((end (line-end-position)))
    (when (eolp)
      (delete-char 1))
    (delete-region (point) end)))
#+end_src

* DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
(use-package diminish
  :ensure t)
#+end_src

* DIRVISH
https://github.com/alexluigit/dirvish

#+begin_src emacs-lisp
(use-package dirvish
  :ensure t
  :init
  (dirvish-override-dired-mode)
  :custom
  (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")))
  :config
  (dirvish-peek-mode) ; Preview files in minibuffer
  (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
  (setq dirvish-mode-line-format
        '(:left (sort symlink) :right (omit yank index)))
  (setq dirvish-attributes
        '(nerd-icons file-time file-size collapse subtree-state vc-state))
  (setq dirvish-subtree-state-style 'nerd)
  (setq delete-by-moving-to-trash t)
  (setq dirvish-path-separators (list
                                 (format "  %s " (nerd-icons-codicon "nf-cod-home"))
                                 (format "  %s " (nerd-icons-codicon "nf-cod-root_folder"))
                                 (format " %s " (nerd-icons-faicon "nf-fa-angle_right"))))
  (setq dired-listing-switches
        "-l --almost-all --human-readable --group-directories-first --no-group")
  :bind ; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
  (;; ("C-c f" . dirvish-fd)
   :map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
   ("a"   . dirvish-quick-access)
   ("f"   . dirvish-file-info-menu)
   ("y"   . dirvish-yank-menu)
   ("N"   . dirvish-narrow)
   ("^"   . dirvish-history-last)
   ("h"   . dirvish-history-jump) ; remapped `describe-mode'
   ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
   ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
   ("RET" . dired-find-alternate-file)
   ("TAB" . dirvish-subtree-toggle)
   ("DEL" . dired-up-directory)
   ("M-f" . dirvish-history-go-forward)
   ("M-b" . dirvish-history-go-backward)
   ("M-l" . dirvish-ls-switches-menu)
   ("M-m" . dirvish-mark-menu)
   ("M-t" . dirvish-layout-toggle)
   ("M-s" . dirvish-setup-menu)
   ("M-e" . dirvish-emerge-menu)
   ("M-j" . dirvish-fd-jump)))
#+end_src

* EDIFF

#+begin_src emacs-lisp
(setq ediff-split-window-function 'split-window-horizontally)
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

* EDITORCONFIG
https://github.com/editorconfig/editorconfig-emacs

#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :diminish
  :config
  (editorconfig-mode 1))
#+end_src

* EMBARK
https://github.com/oantolin/embark

#+begin_src emacs-lisp
(use-package embark
  :ensure t
  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+end_src

* EXPAND REGION
https://github.com/magnars/expand-region.el

#+begin_src emacs-lisp
(use-package expand-region
  :ensure t)
#+end_src

* FLUTTER
https://github.com/amake/flutter.el

#+begin_src emacs-lisp
(use-package flutter
  :ensure t
  :after dart-mode
  :bind (:map dart-mode-map
              ("C-M-x" . #'flutter-run-or-hot-reload))
  :custom
  (flutter-sdk-path "~/src/flutter"))
#+end_src

* FLYCHECK
Install =luacheck= from your Linux distro's repositories for flycheck to work correctly with lua files.  Install =python-pylint= for flycheck to work with python files.  Haskell works with flycheck as long as =haskell-ghc= or =haskell-stack-ghc= is installed.  For more information on language support for flycheck, [[https://www.flycheck.org/en/latest/languages.html][read this]].

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src

* FONTS
Defining the various fonts that Emacs will use.

** Setting the Font Face
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :font "JetBrainsMono Nerd Font"
                    :height 130
                    :weight 'light)
(set-face-attribute 'variable-pitch nil
                   :font "Hurmit Nerd Font"
                   :height 140
                   :weight 'light)
(set-face-attribute 'fixed-pitch nil
                    :font "JetBrainsMono Nerd Font"
                    :height 130
                    :weight 'light)

(set-face-attribute 'font-lock-comment-face nil
                    :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
                    :slant 'italic)

;; tab-bar
(set-face-attribute 'tab-bar-tab nil
                    :inherit 'unspecified)
#+end_src

** Zooming In/Out
You can use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* GENERAL KEYBINDINGS

#+begin_src emacs-lisp
(use-package general
  :ensure t
  :config
  (general-define-key

   "C-=" '(text-scale-increase :wk "Increase font size")
   "C--" '(text-scale-decrease :wk "Decrease font size")
   "C-0" '(text-scale-adjust :wk "Adjust font size")
   "C-1" '((lambda () (interactive) (tab-bar-select-tab 1)) :wk "Select tab 1")
   "C-2" '((lambda () (interactive) (tab-bar-select-tab 2)) :wk "Select tab 2")
   "C-3" '((lambda () (interactive) (tab-bar-select-tab 3)) :wk "Select tab 3")
   "C-4" '((lambda () (interactive) (tab-bar-select-tab 4)) :wk "Select tab 4")
   "C-5" '((lambda () (interactive) (tab-bar-select-tab 5)) :wk "Select tab 5")
   "C-6" '((lambda () (interactive) (tab-bar-select-tab 6)) :wk "Select tab 6")
   "C-7" '((lambda () (interactive) (tab-bar-select-tab 7)) :wk "Select tab 7")
   "C-8" '((lambda () (interactive) (tab-bar-select-tab 8)) :wk "Select tab 8")
   "C-9" '((lambda () (interactive) (tab-bar-select-tab 9)) :wk "Select tab 9")

   "C-;" '(complete-symbol :wk "Complete symbol")
   "C-a" '(mwim-beginning-of-code-or-line :wk "Beginning of line or indentation")
   "C-e" '(mwim-end-of-line-or-code :wk "End of line or indentation")
   "C-k" '(cz/delete-line :wk "Delete line")
   "C-s" '((lambda () (interactive) (consult-line nil 1)) :wk "Search for string")

   "M-/" '(hippie-expand :wk "Hippie expand")
   "M-<backspace>" '(cz/delete-word-backward :wk "Delete word backward")
   "M-d" '(cz/delete-word :wk "Delete word")
   "M-n" '((lambda () (interactive) (scroll-up-command 3)) :wk "Scroll down")
   "M-p" '((lambda () (interactive) (scroll-down-command 3)) :wk "Scroll up")
   "M-s" '(avy-goto-char-timer :wk "Jump to character")
   "M-y" '(consult-yank-pop :wk "Yank pop")

   "M-1" '(winum-select-window-1 :wk "Select window 1")
   "M-2" '(winum-select-window-2 :wk "Select window 2")
   "M-3" '(winum-select-window-3 :wk "Select window 3")
   "M-4" '(winum-select-window-4 :wk "Select window 4")
   "M-5" '(winum-select-window-5 :wk "Select window 5")
   "M-6" '(winum-select-window-6 :wk "Select window 6")
   "M-7" '(winum-select-window-7 :wk "Select window 7")
   "M-8" '(winum-select-window-8 :wk "Select window 8")
   "M-9" '(winum-select-window-9 :wk "Select window 9")
   "M-0" '(treemacs-add-and-display-current-project-exclusively :wk "Treemacs project"))

  ;;
  ;; C-x
  ;;
  (general-create-definer cz/leader-keys-C-x
    :prefix "C-x"
    :keymaps 'override)

  (cz/leader-keys-C-x
    "b" '(consult-buffer :wk "Switch buffer")
    "B" '(consult-buffer-other-window :wk "Switch buffer other window")
    "k" '(kill-this-buffer :wk "Kill this buffer")
    "K" '(kill-buffer-and-window :wk "Kill buffer"))

  ;;
  ;; C-c
  ;;
  (general-create-definer cz/leader-keys
    :prefix "C-c"
    :keymaps 'override)

  (cz/leader-keys
    "." '(embark-act :wk "Embark act")
    "<" '(previous-buffer :wk "Previous buffer")
    ">" '(next-buffer :wk "Next buffer")
    "=" '(er/expand-region :wk "Expand region")
    "+" '(er/expand-region :wk "Expand region")
    "-" '(er/contract-region :wk "Contract region")
    "C-=" '(er/expand-region :wk "Expand region")
    "C--" '(er/contract-region :wk "Contract region")
    "C-r" '(vertico-repeat :wk "Vertico repeat")
    "TAB" '(indent-rigidly :wk "Indent region")
    "M-x" '(consult-mode-command :wk "Consult command")
    "RET" '(gptel-menu :wk "Send to GPTel")
    "C-<return>" '(gptel-abort :wk "Abort GPTel"))

  (cz/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" '(consult-buffer :wk "Switch buffer")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b I" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

  (cz/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d t" '(treemacs-select-directory :wk "Open directory in treemacs"))

  (cz/leader-keys
    "e" '(:ignore t :wk "Embark/Evaluate")
    "e c" '(embark-collect :wk "Embark collect")
    "e e" '(embark-export :wk "Embark export")
    "e l" '(embark-live :wk "Embark live")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e s" '(eshell :which-key "Eshell"))

  (defun cz/delete-this-file ()
    "Delete the file associated with the current buffer and kill the buffer with confirmation."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if filename
          (if (y-or-n-p (format "Are you sure you want to delete %s? " filename))
              (progn
                (delete-file filename)
                (message "Deleted file %s" filename)
                (kill-this-buffer))
            (message "Canceled"))
        (message "Not a file"))))

  (cz/leader-keys
    "f" '(:ignore t :wk "Files")
    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Open emacs config.org")
    "f D" '(cz/delete-this-file :wk "Delete this file")
    "f e" '((lambda () (interactive) (dired "~/.config/emacs")) :wk "Open user-emacs-directory in dired")
    "f f" '(find-file :wk "Find file")
    "f j" '(consult-fd :wk "Find file with fd")
    "f l" '(consult-locate :wk "Locate a file")
    "f m" '(rename-visited-file :wk "Rename file")
    "f r" '(consult-recent-file :wk "Recent file")
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit this file")
    "f x" '(scratch-buffer :wk "Scratch buffer"))

  (cz/leader-keys
    "h" '(:ignore t :wk "Help")
    "h b" '(describe-bindings :wk "Describe bindings")
    "h c" '(describe-char :wk "Describe character under cursor")
    "h f" '(describe-function :wk "Describe function")
    "h F" '(describe-face :wk "Describe face")
    "h g" '(describe-gnu-project :wk "Describe GNU Project")
    "h i" '(consult-info :wk "Info")
    "h I" '(describe-input-method :wk "Describe input method")
    "h k" '(describe-key :wk "Describe key")
    "h K" '(describe-keymap :wk "Describe keymap")
    "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive)
                (load-file "~/.config/emacs/init.el")
                (ignore (elpaca-process-queues)))
              :wk "Reload emacs config")
    "h t" '(consult-theme :wk "Load theme")
    "h v" '(describe-variable :wk "Describe variable")
    "h w" '(where-is :wk "Prints keybinding for command if set")
    "h x" '(describe-command :wk "Display full documentation for command"))

  (cz/leader-keys
    "M" '(:ignore t :wk "Music")
    "M a" '(vuiet-play-artist :wk "Play artist")
    "M A" '(vuiet-play-album :wk "Play album")
    ;; "M c" '(vuiet-info-playing-track-album :wk "Currently playing track album")
    "M g" '(vuiet-play-tag-similar :wk "Play tag")
    "M i" '(:ignore t :wk "Info")
    "M i a" '(vuiet-artist-info :wk "Artist info")
    "M i A" '(vuiet-album-info :wk "Album info")
    "M i t" '(vuiet-tag-info :wk "Tag info")
    "M l" '(vuiet-playing-track-lyrics :wk "Playing track lyrics")
    "M p" '(:ignore t :wk "Player")
    "M p l" '(vuiet-love-track :wk "Love track")
    "M p L" '(vuiet-love-unlove-track :wk "Unlove track")
    "M p n" '(vuiet-next :wk "Next")
    "M p s" '(vuiet-stop :wk "Stop")
    "M p p" '(vuiet-play-pause :wk "Play/pause")
    "M r" '(vuiet-play-loved-tracks-similar :wk "Play similar loved tracks")
    "M s" '(vuiet-play-artist-similar :wk "Play similar artist")
    ;; "M S" '(vuiet-play-playing-artist-similar :wk "Play similar currently playing artist")
    "M t" '(vuiet-play-track :wk "Play track")
    "M T" '(vuiet-play-track-search :wk "Play track search"))

  (cz/leader-keys
    "m" '(:ignore t :wk "Multiple cursors")
    "m a" '(mc/mark-all-like-this :wk "Mark all like this")
    "m d" '(mc/mark-all-dwim :wk "Mark all dwim")
    "m l" '(mc/edit-lines :wk "Edit lines"))

  (cz/leader-keys
    "o" '(:ignore t :wk "Org")
    "o a" '(org-agenda :wk "Org agenda")
    "o e" '(org-export-dispatch :wk "Org export dispatch")
    "o i" '(org-toggle-item :wk "Org toggle item")
    "o t" '(org-todo :wk "Org todo")
    "o B" '(org-babel-tangle :wk "Org babel tangle")
    "o T" '(org-todo-list :wk "Org todo list")
    "o x" '(org-toggle-checkbox :wk "Org toggle checkbox"))

  (cz/leader-keys
    "o b" '(:ignore t :wk "Tables")
    "o b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (cz/leader-keys
    "o d" '(:ignore t :wk "Date/deadline")
    "o d t" '(org-time-stamp :wk "Org time stamp"))

  (cz/leader-keys
    "p" '(:keymap project-prefix-map :wk "Project"))

  (cz/leader-keys
    "q" '(:ignore t :wk "Quit")
    "q f" '(delete-frame :wk "Delete frame")
    "q q" '(save-buffers-kill-emacs :wk "Quit Emacs")
    "q r" '(restart-emacs :wk "Restart Emacs"))

  (cz/leader-keys
    "s" '(:ignore t :wk "Search")
    "s d" '(rg :wk "Ripgrep in directory")
    "s g" '(consult-grep :wk "Grep")
    "s m" '(consult-man :wk "Man pages")
    "s p" '(rg-project :wk "Ripgrep in project")
    "s r" '(consult-ripgrep :wk "Consult ripgrep")
    "s t" '(tldr :wk "Lookup TLDR docs for a command"))

  (cz/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(treemacs :wk "Toggle treemacs")
    "t v" '(vterm-toggle :wk "Toggle vterm")
    "t w" '(visual-line-mode :wk "Toggle word wrap"))

  (cz/leader-keys
    "v" '(:ignore t :wk "Version control")
    "v /" '(magit-dispatch :wk "Magit dispatch")
    "v ." '(magit-file-dispatch :wk "Magit file dispatch")
    "v g" '(magit-status :wk "Magit status")
    "v m" '(magit-git-mergetool :wk "Magit git mergetool")
    "v t" '(git-timemachine :wk "Git time machine"))

  (cz/leader-keys
    "w" '(:ignore t :wk "Workspaces/Windows")
    "w c" '(tabspaces-open-or-create-project-and-workspace :wk "Open or create project and workspace")
    "w k" '(tabspaces-kill-buffers-close-workspace :wk "Kill buffers and close workspace")
    "w m" '(:ignore t :wk "Move")
    "w m b" '(buf-move-left :wk "Buffer move left")
    "w m n" '(buf-move-down :wk "Buffer move down")
    "w m p" '(buf-move-up :wk "Buffer move up")
    "w m f" '(buf-move-right :wk "Buffer move right"))

  ;; (cz/leader-keys
  ;;   "C-f" '(:ignore t :wk "Fold")
  ;;   "C-f C-f" '(vimish-fold :wk "Fold")
  ;;   "C-f C-u" '(vimish-fold-delete :wk "Unfold all")
  ;;   "C-f C-a C-f" '(vimish-fold-refold :wk "Fold all")
  ;;   "C-f C-a C-u" '(vimish-fold-unfold-all :wk "Unfold all"))

  ;;
  ;; M-g
  ;;
  (general-create-definer cz/leader-keys-M-g
    :prefix "M-g")

  (cz/leader-keys-M-g
    "g" '(consult-goto-line :wk "Go to line")
    "i" '(consult-imenu :wk "Imenu")
    "I" '(consult-imenu-multi :wk "Imenu multi")
    "o" '(consult-outline :wk "Outline"))

  ;;
  ;; Copilot
  ;;
  (general-define-key
   :keymaps 'copilot-completion-map
   "TAB" '(copilot-accept-completion :wk "Accept completion")
   "C-e" '(copilot-accept-completion-by-line :wk "Accept completion by line")
   "C-g" '(copilot-clear-overlay :wk "Clear overlay")
   "C-c C-n" '(copilot-next-completion :wk "Next completion")
   "C-c C-p" '(copilot-previous-completion :wk "Previous completion")
   "M-f" '(copilot-accept-completion-by-word :wk "Accept completion by word"))

  ;;
  ;; Corfu
  ;;
  (general-define-key
   :keymaps 'corfu-map
   "TAB" 'ignore
   "<tab>" 'ignore)

  ;;
  ;; Git
  ;;
  (general-define-key
   :keymaps 'git-commit-mode-map
   "C-c v c" '(magit-generate-changelog :wk "Generate changelog"))

  ;;
  ;; Ibuffer
  ;;
  (general-define-key
   :keymaps 'ibuffer-mode-map
   "TAB" '(ibuffer-toggle-filter-group :wk "Toggle filter group"))

  ;;
  ;; Indent Rigidly
  ;;
  (general-define-key
   :keymaps 'indent-rigidly-map
   "b" '(indent-rigidly-left :wk "Indent left")
   "f" '(indent-rigidly-right :wk "Indent right")
   "B" '(indent-rigidly-left-to-tab-stop :wk "Indent left to tab stop")
   "F" '(indent-rigidly-right-to-tab-stop :wk "Indent right to tab stop"))

  ;;
  ;; JavaScript
  ;;
  (general-define-key
   :keymaps 'js-ts-mode-map
   "M-." '(xref-find-definitions :wk "Find definitions"))

  ;;
  ;; Magit
  ;;
  (general-define-key
   :keymaps 'magit-mode-map
   "C-<tab>" nil
   "M-1" nil
   "M-2" nil
   "M-3" nil
   "M-4" nil
   "M-5" nil
   "M-6" nil
   "M-7" nil
   "M-8" nil
   "M-9" nil
   "M-0" nil)

  ;;
  ;; Org
  ;;
  (general-define-key
   :keymaps 'org-mode-map
   "M-g a" '(consult-org-agenda :wk "Org agenda")
   "M-g o" '(consult-org-heading :wk "Org heading"))

  ;;
  ;; Projectile
  ;;
  ;; (general-define-key
  ;;  :keymaps 'projectile-command-map
  ;;  "b" '(consult-project-buffer :wk "Switch buffer in project")
  ;;  "s r" '(rg-project :wk "Ripgrep in project")
  ;;  "t" '(treemacs-add-and-display-current-project-exclusively :wk "Show project in treemacs"))

  ;;
  ;; Rg
  ;;
  (general-define-key
   :keymaps 'rg-mode-map
   "n" '(compilation-next-error :wk "Move to next line with a match")
   "p" '(compilation-previous-error :wk "Move to previous line with a match")
   "C-c n" '(rg-next-file :wk "Move to next file with a match")
   "C-c p" '(rg-prev-file :wk "Move to previous file with a match")))
#+end_src

* GIT PROGRAMS

** Diff Hl
https://github.com/dgutov/diff-hl

#+begin_src emacs-lisp
(use-package diff-hl
  :ensure t
  :hook ((dired-mode . diff-hl-dired-mode)
         (magit-pre-refresh . diff-hl-magit-pre-refresh)
         (magit-post-refresh . diff-hl-magit-post-refresh))
  :config
  (global-diff-hl-mode))
#+end_src

** Git Time Machine
[[https://github.com/emacsmirror/git-timemachine][git-timemachine]] is a program that allows you to move backwards and forwards through a file's commits.  'SPC g t' will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use 'CTRL-j' and 'CTRL-k' to move backwards and forwards through the commits.

#+begin_src emacs-lisp
(use-package git-timemachine
  :ensure t
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook))
#+end_src

** Magit
[[https://magit.vc/manual/][Magit]] is a full-featured git client for Emacs.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :custom
  (transient-display-buffer-action '(display-buffer-below-selected))
  (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))
#+end_src

* HIGHLIGHT INDENT GUIDES
https://github.com/DarthFennec/highlight-indent-guides

#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :diminish
  :hook
  (prog-mode . highlight-indent-guides-mode)
  (yaml-ts-mode . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-method 'character))
#+end_src

* HIGHLIGHT TODO
Adding highlights to TODO and related words.

#+begin_src emacs-lisp
(use-package hl-todo
  :ensure t
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

* HIPPIE EXPAND

#+begin_src emacs-lisp
(setq hippie-expand-try-functions-list
      '(try-complete-file-name-partially
        try-complete-file-name
        try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))
#+end_src

* IBUFFER

#+begin_src emacs-lisp
(add-hook 'ibuffer-mode-hook
          (lambda ()
            (display-line-numbers-mode -1)
            (visual-line-mode -1)))
#+end_src

** Ibuffer Project

#+begin_src emacs-lisp
(use-package ibuffer-project
  :ensure t
  :hook
  (ibuffer . (lambda ()
               (visual-line-mode -1)
               (setq ibuffer-filter-groups (ibuffer-project-generate-filter-groups))
               (unless (eq ibuffer-sorting-mode 'project-file-relative)
                 (ibuffer-do-sort-by-project-file-relative)))))
#+end_src

** Ibuffer Projectile
#+begin_quote
Currently using =project.el= instead of =projectile=.
#+end_quote

https://github.com/purcell/ibuffer-projectile

#+begin_src emacs-lisp
;; (use-package ibuffer-projectile
;;   :ensure t
;;   :config
;;   (setq ibuffer-projectile-prefix "Project: ")
;;   :hook
;;   (ibuffer . (lambda ()
;;                (visual-line-mode -1)
;;                (ibuffer-projectile-set-filter-groups))))
#+end_src

* KUBERNETES
https://github.com/kubernetes-el/kubernetes-el

#+begin_src emacs-lisp
(use-package kubernetes
  :ensure t
  :commands (kubernetes-overview)
  :config
  (setq kubernetes-poll-frequency 3600
        kubernetes-redraw-frequency 3600))
#+end_src

* LANGUAGE SUPPORT
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL.  Other languages will require you to install additional modes.

** Dart
https://github.com/emacsorphanage/dart-mode

#+begin_src emacs-lisp
(use-package dart-mode
  :ensure t)
(use-package lsp-dart
  :ensure t)
#+end_src

** JSON
Using =json-ts-mode= instead of =json-mode=.

#+begin_src emacs-lisp
;; (use-package json-mode
;;   :ensure t)
#+end_src

** Markdown

*** Grip
https://github.com/seagle0128/grip-mode

#+begin_src emacs-lisp
(use-package grip-mode
  :ensure t
  :bind (:map markdown-mode-command-map
              ("g" . grip-mode)))
#+end_src

** Terraform
#+begin_src emacs-lisp
(use-package terraform-mode
  :ensure t
  :custom
  (terraform-indent-level 2)
  (terraform-format-on-save t))

;; Doesn't work right now
;; (use-package terraform-ts-mode
;;   :ensure (:host github :repo "kgrotel/terraform-ts-mode")
;;   :custom
;;   (terraform-ts-indent-level 2)
;;   (terraform-ts-format-on-save t))
#+end_src

** YAML
Using =yaml-ts-mode= instead of =yaml-mode=.

#+begin_src emacs-lisp
;; (use-package yaml-mode
;;   :ensure t)
#+end_src

* LSP
https://github.com/emacs-lsp/lsp-mode
https://emacs-lsp.github.io/lsp-mode/

#+begin_src emacs-lisp
(define-derived-mode helm-mode yaml-ts-mode "helm"
  "Major mode for editing kubernetes helm templates")

(use-package lsp-mode
  :ensure t
  :bind-keymap ("C-c l" . lsp-command-map)
  :init
  (setq lsp-apply-edits-after-file-operations nil
        lsp-before-save-edits nil
        lsp-completion-enable t
        lsp-completion-enable-additional-text-edit t
        lsp-completion-filter-on-incomplete t
        lsp-completion-no-cache nil
        lsp-completion-provider :none
        lsp-completion-show-detail t
        lsp-completion-show-kind t
        lsp-completion-show-label-description t
        lsp-completion-sort-initial-results t
        lsp-completion-use-last-result t
        lsp-enable-snippet t
        lsp-diagnostics-provider :auto
        lsp-eldoc-enable-hover nil
        lsp-enable-snippet nil
        lsp-enable-symbol-highlighting t
        lsp-headerline-breadcrumb-enable t
        lsp-headerline-breadcrumb-segments '(symbols)
        lsp-keymap-prefix "C-c l"
        lsp-modeline-code-actions-enable nil
        lsp-modeline-diagnostics-enable t
        lsp-response-timeout 60
        lsp-signature-auto-activate t
        lsp-signature-render-documentation t
        lsp-ui-doc-enable t
        lsp-ui-doc-show-with-cursor nil
        lsp-ui-doc-show-with-mouse t
        lsp-ui-sideline-enable t
        lsp-ui-sideline-show-code-actions t
        lsp-ui-sideline-show-diagnostics t
        lsp-ui-sideline-show-hover nil)
  :hook ((bash-ls-mode . lsp-deferred)
         (dart-mode . lsp-deferred)
         (dockerfile-ts-mode . lsp-deferred)
         (js-ts-mode . lsp-deferred)
         (json-ts-mode . lsp-deferred)
         (terraform-mode . lsp-deferred)
         (tsx-ts-mode . lsp-deferred)
         (typescript-ts-mode . lsp-deferred)
         (yaml-ts-mode . lsp-deferred)

         (lsp-mode . lsp-enable-which-key-integration))
  :commands (lsp lsp-deferred)
  :config
  (add-to-list 'lsp-language-id-configuration '(helm-mode . "helm"))

  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("helm_ls" "serve"))
                    :activation-fn (lsp-activate-on "helm")
                    :server-id 'helm-ls)))

;; optionally
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)
;; if you are helm user
;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs
  :ensure t
  :commands lsp-treemacs-errors-list)

(use-package dap-mode
  :ensure t)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+end_src

* MARGINALIA
marginalia.el - Marginalia in the minibuffer
https://github.com/minad/marginalia

Enable rich annotations using the Marginalia package.

#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src

* MINIBUFFER ESCAPE
By default, Emacs requires you to hit ESC three times to escape quit the minibuffer.  

#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.  For more information on what is available to configure in the Doom modeline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (line-number-mode -1)
  (setq doom-modeline-buffer-encoding nil
        doom-modeline-buffer-file-name-style 'relative-to-project
        doom-modeline-height 35
        doom-modeline-icon t
        doom-modeline-major-mode-color-icon t
        doom-modeline-major-mode-icon t
        doom-modeline-persp-name nil
        doom-modeline-persp-icon nil))
#+end_src

* MOVE WHERE I MEAN
https://github.com/alezost/mwim.el

This package allows you to move to the beginning/end of a line or code.

#+begin_src emacs-lisp
(use-package mwim
  :ensure t)
#+end_src

* MULTIPLE CURSORS
https://github.com/magnars/multiple-cursors.el

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t)
#+end_src

* NERD ICONS
https://github.com/rainstormstudio/nerd-icons.el

#+begin_src emacs-lisp
(use-package nerd-icons
  :ensure t)
#+end_src

** Nerd Icons Completion
https://github.com/rainstormstudio/nerd-icons-completion

#+begin_src emacs-lisp
(use-package nerd-icons-completion
  :ensure t
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

** Nerd Icons Corfu
https://github.com/LuigiPiucco/nerd-icons-corfu

#+begin_src emacs-lisp
(use-package nerd-icons-corfu
  :ensure t
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)

  ;; Optionally:
  (setq nerd-icons-corfu-mapping
        '((array :style "cod" :icon "symbol_array" :face font-lock-type-face)
          (boolean :style "cod" :icon "symbol_boolean" :face font-lock-builtin-face)
          ;; ...
          (t :style "cod" :icon "code" :face font-lock-warning-face)))
  ;; Remember to add an entry for `t', the library uses that as default.
  )
#+end_src

** Nerd Icons Ibuffer
https://github.com/seagle0128/nerd-icons-ibuffer

#+begin_src emacs-lisp
(use-package nerd-icons-ibuffer
  :ensure t
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode)
  :config
  (setq nerd-icons-ibuffer-formats
        '((mark " "
                (icon 2 2)
                (name 50 50 :left :elide)
                " "
                project-file-relative)
          (mark " "
                (name 50 -1)
                " " filename))))
#+end_src

* ORDERLESS
https://github.com/oantolin/orderless

#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

* ORG MODE

#+begin_src emacs-lisp
(setq org-directory "~/org/")
#+end_src

** Enabling Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
  :ensure t
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets
  :ensure t)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src

** Org TODO

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "WAIT" "HOLD" "DONE")))
#+end_src

* PERSISTENT SCRATCH
https://github.com/Fanael/persistent-scratch

#+begin_src emacs-lisp
(use-package persistent-scratch
  :ensure t
  :config
  (persistent-scratch-setup-default))
#+end_src

* PERSP MODE
#+begin_quote
Currently using =tabspaces= instead of =persp-mode=.
#+end_quote

Using [[https://github.com/Bad-ptr/persp-mode.el][persp-mode]] which is a fork of [[https://github.com/nex3/perspective-el][perspective-el]].

#+begin_src emacs-lisp
;; (use-package persp-mode
;;   :ensure t
;;   :custom
;;   (persp-keymap-prefix (kbd "C-c w"))
;;   :init
;;   (persp-mode 1)
;;   :config
;;   (setq persp-autokill-buffer-on-remove 'kill-weak)
;;   ;; Sets a file to write to when we save states
;;   (setq persp-state-default-file "~/.config/emacs/sessions")
;;   (setq wg-morph-on nil))
#+end_src

** Persp Mode Projectile Bridge
#+begin_quote
Currently using =project.el= instead of =projectile=.
#+end_quote

#+begin_src emacs-lisp
;; (use-package persp-mode-projectile-bridge
;;   :ensure t
;;   ;; :after (persp-mode projectile)
;;   :hook
;;   ((persp-mode projectile) . (lambda () (persp-mode-projectile-bridge-mode 1)))
;;   ;; :config
;;   ;; (persp-mode-projectile-bridge-mode 1)
;;   :init
;;   (persp-mode-projectile-bridge-mode 1))
#+end_src

* POPWIN
https://github.com/emacsorphanage/popwin

#+begin_src emacs-lisp
(use-package popwin
  :ensure t
  :config
  (push "*Flycheck errors*" popwin:special-display-config)
  (push "*lsp-help*" popwin:special-display-config)
  (push "*Warnings*" popwin:special-display-config)
  (push "*xref*" popwin:special-display-config)
  (popwin-mode 1))
#+end_src

* PROJECT

#+begin_src emacs-lisp
(setq project-switch-commands
      '((project-find-file "File" "f")
        (project-dired "Directory" "d")
        (magit-project-status "Magit" "m")
        (consult-ripgrep "ripgrep" "r")))
(setq project-vc-extra-root-markers '(".project.el" ".projectile" "a.yaml"))
#+end_src

* PROJECTILE
#+begin_quote
Currently using =project.el= instead of =projectile=.
#+end_quote

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.  It should be noted that many projectile commands do not work if you have set "fish" as the "shell-file-name" for Emacs. I had initially set "fish" as the "shell-file-name" in the Vterm section of this config, but oddly enough I changed it to "bin/sh" and projectile now works as expected, and Vterm still uses "fish" because my default user "sh" on my Linux system is "fish".

#+begin_src emacs-lisp
;; (use-package projectile
;;   :ensure t
;;   :config
;;   (projectile-mode 1)
;;   (setq projectile-project-search-path '(("~/.dotfiles" . 0) ("~/coding" . 1) ("~/src" . 1))))
#+end_src

* PROTOBUF

#+begin_src emacs-lisp
(use-package protobuf-mode
  :ensure t)
#+end_src

* RAINBOW DELIMITERS
Adding rainbow coloring to parentheses.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

* RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.  

#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure t
  :diminish
  :hook
  ((org-mode prog-mode) . rainbow-mode))
#+end_src

* RIPGREP
https://github.com/dajva/rg.el

#+begin_src emacs-lisp
(use-package rg
  :ensure t
  :config
  (setq rg-ignore-case 'smart))
#+end_src

* SANE DEFAULTS
The following settings are simple modes that are enabled (or disabled) so that Emacs functions more like you would expect a proper editor/IDE to function.

#+begin_src emacs-lisp
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
;; (desktop-save-mode 1)        ;; Save the desktop on exit.
;; (electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
                           (setq-local electric-pair-inhibit-predicate
                                       `(lambda (c)
                                          (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(global-auto-revert-mode t)          ;; Automatically show changes if the file has changed
(global-display-line-numbers-mode 1) ;; Display line numbers
;; (global-visual-line-mode t)          ;; Enable truncated lines
(menu-bar-mode -1)                   ;; Disable the menu bar
(save-place-mode 1)                  ;; Save the cursor position when a file is closed
(scroll-bar-mode -1)                 ;; Disable the scroll bar
;; (tab-bar-mode t)                     ;; Enable tab bar mode
(tool-bar-mode -1)                   ;; Disable the tool bar

(setopt use-short-answers t) ;; Since Emacs 29, `yes-or-no-p' will use `y-or-n-p'

(setq-default cursor-type '(bar . 2)) ;; Set the cursor to a bar
(setq-default indent-tabs-mode nil)
(setq-default line-spacing 0.12)

(setq calendar-week-start-day 1) ;; Set the calendar to start on Monday
(setq completion-cycle-threshold 3)
(setq dired-kill-when-opening-new-dired-buffer t)
(setq initial-major-mode 'text-mode)
(setq initial-scratch-message nil)
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
(setq save-place-file (concat user-emacs-directory ".emacs-places"))
#+end_src

** Scroll

#+begin_src emacs-lisp
(pixel-scroll-precision-mode)

(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
#+end_src

** Tab Bar

#+begin_src emacs-lisp
(setq tab-always-indent t
      tab-bar-auto-width nil
      tab-bar-close-button-show nil
      tab-bar-new-button-show nil
      tab-bar-new-tab-choice "*scratch*"
      tab-bar-new-tab-to 'rightmost
      tab-bar-tab-hints t)
#+end_src

* SHELLS AND TERMINALS
In my configs, all of my shells (bash, fish, zsh and the ESHELL) require my shell-color-scripts-git package to be installed.  On Arch Linux, you can install it from the AUR.  Otherwise, go to my shell-color-scripts repository on GitLab to get it.

** Eshell
Eshell is an Emacs 'shell' that is written in Elisp.

#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :ensure t
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
;; eshell-aliases-file -- sets an aliases file for the eshell.

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

** Vterm
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :config
  (setq shell-file-name "/bin/fish"
        vterm-max-scrollback 5000))
#+end_src

** Vterm Toggle 
[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.

#+begin_src emacs-lisp
(use-package vterm-toggle
  :ensure t
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 ;;(display-buffer-reuse-window display-buffer-in-direction)
                 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                 ;;(direction . bottom)
                 ;;(dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.3))))
#+end_src

* STARTING THE DAEMON

#+begin_src emacs-lisp
(server-start)
#+end_src

* SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+begin_src emacs-lisp
(use-package sudo-edit
  :ensure t)
#+end_src

* SUPER SAVE
https://github.com/bbatsov/super-save

#+begin_src emacs-lisp
(use-package super-save
  :ensure t
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t)
  (setq auto-save-default nil)
  (setq super-save-silent t))
#+end_src

* TABSPACES
https://github.com/mclear-tools/tabspaces

#+begin_src emacs-lisp
(use-package tabspaces
  :ensure t
  :hook (elpaca-after-init . tabspaces-mode)
  :commands (tabspaces-switch-or-create-workspace
             tabspaces-open-or-create-project-and-workspace)
  :custom
  (tabspaces-use-filtered-buffers-as-default t)
  (tabspaces-default-tab "Default")
  (tabspaces-remove-to-default t)
  (tabspaces-include-buffers '("*scratch*"))
  (tabspaces-initialize-project-with-todo nil)
  ;; sessions
  ;; (tabspaces-session t)
  ;; (tabspaces-session-auto-restore t)
  :config
  (setq tabspaces-project-switch-commands
        '((project-find-file "File" "f")
          (project-dired "Directory" "d")
          (magit-project-status "Magit" "m")
          (consult-ripgrep "ripgrep" "r"))))
#+end_src

* TLDR

#+begin_src emacs-lisp
(use-package tldr
  :ensure t)
#+end_src

* TRANSPARENCY
With Emacs version 29, true transparency has been added.  

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 92)) ; For all new frames henceforth
#+end_src

* TREE SITTER
Before Emacs 29, tree-sitter was a [[https://emacs-tree-sitter.github.io/][package]] that could be installed. With Emacs 29, tree-sitter is built-in in package =treesit.el=.

** Treesit Auto

#+begin_src emacs-lisp
(use-package treesit-auto
  :ensure t
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src

** Ts Fold
The package =ts-fold= currently doesn't work with =treesit.el=.
https://github.com/emacs-tree-sitter/ts-fold/issues/48

#+begin_src emacs-lisp
;; (use-package ts-fold
;;   :ensure (:host github :repo "emacs-tree-sitter/ts-fold")
;;   :config
;;   (global-ts-fold-mode 1)
;;   (global-ts-fold-indicators-mode 1))
#+end_src

* TREEMACS
https://github.com/Alexander-Miller/treemacs

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :hook
  (treemacs-mode . (lambda ()
                     (display-line-numbers-mode -1)
                     (visual-line-mode -1)))
  :config
  (progn
    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil)))

(use-package treemacs-nerd-icons
  :ensure t
  :after (treemacs lsp-treemacs nerd-icons)
  :config
  (treemacs-load-theme "nerd-icons"))

(use-package treemacs-magit
  :ensure t
  :after (treemacs magit))

(use-package treemacs-tab-bar
  :ensure t
  :after (treemacs)
  :config (treemacs-set-scope-type 'Tabs))
#+end_src

* TRIMMING WHITESPACE

#+begin_src emacs-lisp
(use-package ws-butler
  :ensure t
  :config
  (ws-butler-global-mode 1) 
  (setq ws-butler-global-exempt-modes '(markdown-mode)))
#+end_src

* VERTICO
https://github.com/minad/vertico

vertico.el - VERTical Interactive COmpletion

#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :ensure nil
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :ensure nil
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

** Vertico Posframe
https://github.com/tumashu/vertico-posframe

#+begin_src emacs-lisp
;; (use-package vertico-posframe
;;   :ensure t
;;   :config
;;   (vertico-posframe-mode 1)
;;   (setq vertico-posframe-border-width 2
;;         vertico-posframe-parameters '((left-fringe . 8) (right-fringe . 8))
;;     vertico-posframe-poshandler 'posframe-poshandler-frame-top-center)
;;   (set-face-attribute 'vertico-posframe-border nil :background "#b0bec5"))
#+end_src

* VUIET
https://github.com/mihaiolteanu/vuiet

#+begin_src emacs-lisp
(use-package vuiet
  :ensure t
  :after lastfm
  :custom
  (vuiet-update-mode-line-interval 1))
#+end_src

** Last.fm
https://github.com/mihaiolteanu/lastfm.el

#+begin_src emacs-lisp
(use-package lastfm
  :ensure t)
#+end_src

* XREF

#+begin_src emacs-lisp
(use-package xref
  :ensure t
  :hook
  (xref--xref-buffer-mode . (lambda () (display-line-numbers-mode -1))))
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :diminish
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit nil
        which-key-separator " → " ))
#+end_src

* WINDOW NUMBERING
https://github.com/deb0ch/emacs-winum

#+begin_src emacs-lisp
(use-package winum
  :ensure t
  :config
  (winum-mode))
#+end_src

* WORKSPACES
https://github.com/pashinin/workgroups2

#+begin_src emacs-lisp
;; (use-package workgroups2
;;   :ensure t
;;   :config
;;   (setq wg-prefix-key (kbd "C-c w"))
;;   (setq wg-session-file "~/.config/emacs/workgroups")
;;   (setq wg-emacs-exit-save-behavior           'save)      ; Options: 'save 'ask nil
;;   (setq wg-workgroups-mode-exit-save-behavior 'save)      ; Options: 'save 'ask nil
;;   (setq wg-morph-on nil)
;;   (workgroups-mode 1))
#+end_src
