#+title: GNU Emacs Config
#+author: Vladimir Kosteley
#+description: Personal Emacs config
#+startup: showeverything
#+options: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#adding-the-scripts-directory-to-path][Adding the scripts directory to path]]
  - [[#sourcing-the-scripts][Sourcing the scripts]]
  - [[#transient][Transient]]
  - [[#custom-file][Custom File]]
  - [[#themes][Themes]]
  - [[#lsp-keymap-init][LSP Keymap Init]]
  - [[#useful-functions][Useful Functions]]
- [[#ai][AI]]
  - [[#aider][Aider]]
  - [[#chatgpt-shell][chatgpt-shell]]
  - [[#claude-code][Claude Code]]
  - [[#elysium][elysium]]
  - [[#github-copilot][GitHub Copilot]]
  - [[#github-copilot-chat][GitHub Copilot Chat]]
  - [[#gptel][gptel]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#atomic-chrome][ATOMIC CHROME]]
- [[#backup][BACKUP]]
- [[#company][COMPANY]]
- [[#consult][CONSULT]]
  - [[#embark-consult][Embark Consult]]
- [[#corfu][CORFU]]
  - [[#cape][CAPE]]
- [[#dashboard][DASHBOARD]]
- [[#delete-word-and-line][DELETE WORD AND LINE]]
- [[#denote][DENOTE]]
- [[#desktop-save][DESKTOP SAVE]]
- [[#diminish][DIMINISH]]
- [[#dirvish][DIRVISH]]
- [[#ediff][EDIFF]]
- [[#editorconfig][EDITORCONFIG]]
- [[#embark][EMBARK]]
- [[#direnv][DIRENV]]
- [[#expand-region][EXPAND REGION]]
- [[#flycheck][FLYCHECK]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#general-keybindings][GENERAL KEYBINDINGS]]
  - [[#cyrillic-keybindings][Cyrillic Keybindings]]
- [[#git][GIT]]
  - [[#diff-hl][Diff Hl]]
  - [[#git-gutter][Git Gutter]]
  - [[#git-time-machine][Git Time Machine]]
  - [[#magit][Magit]]
- [[#highlight-indent-guides][HIGHLIGHT INDENT GUIDES]]
- [[#highlight-todo][HIGHLIGHT TODO]]
- [[#hippie-expand][HIPPIE EXPAND]]
- [[#ibuffer][IBUFFER]]
  - [[#ibuffer-project][Ibuffer Project]]
  - [[#ibuffer-projectile][Ibuffer Projectile]]
- [[#kubernetes][KUBERNETES]]
- [[#language-support][LANGUAGE SUPPORT]]
  - [[#dart][Dart]]
  - [[#fish][Fish]]
  - [[#go][Go]]
  - [[#json][JSON]]
  - [[#markdown][Markdown]]
  - [[#python][Python]]
  - [[#terraform][Terraform]]
  - [[#yaml][YAML]]
- [[#lsp][LSP]]
  - [[#lsp-ui][LSP UI]]
  - [[#lsp-treemacs][LSP Treemacs]]
  - [[#lsp-dap-mode][LSP Dap Mode]]
- [[#marginalia][MARGINALIA]]
- [[#minibuffer-escape][MINIBUFFER ESCAPE]]
- [[#modeline][MODELINE]]
- [[#move-where-i-mean][MOVE WHERE I MEAN]]
- [[#multiple-cursors][MULTIPLE CURSORS]]
- [[#nerd-icons][NERD ICONS]]
  - [[#nerd-icons-completion][Nerd Icons Completion]]
  - [[#nerd-icons-corfu][Nerd Icons Corfu]]
  - [[#nerd-icons-ibuffer][Nerd Icons Ibuffer]]
- [[#nvm][NVM]]
- [[#orderless][ORDERLESS]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#org-todo][Org TODO]]
  - [[#org-appear][Org Appear]]
  - [[#org-roam][Org Roam]]
- [[#persistent-scratch][PERSISTENT SCRATCH]]
- [[#persp-mode][PERSP MODE]]
  - [[#persp-mode-projectile-bridge][Persp Mode Projectile Bridge]]
- [[#popwin][POPWIN]]
- [[#project][PROJECT]]
  - [[#project-tab-groups][Project Tab Groups]]
- [[#projectile][PROJECTILE]]
- [[#protobuf][PROTOBUF]]
- [[#rainbow-delimiters][RAINBOW DELIMITERS]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#ripgrep][RIPGREP]]
- [[#sane-defaults][SANE DEFAULTS]]
  - [[#scroll][Scroll]]
  - [[#ssh-agent][SSH Agent]]
  - [[#tab-bar][Tab Bar]]
  - [[#tab-line][Tab Line]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm Toggle]]
- [[#starting-the-daemon][STARTING THE DAEMON]]
- [[#sudo-edit][SUDO EDIT]]
- [[#super-save][SUPER SAVE]]
- [[#tabspaces][TABSPACES]]
- [[#tldr][TLDR]]
- [[#transparency][TRANSPARENCY]]
- [[#tree-sitter][TREE SITTER]]
  - [[#treesit-auto][Treesit Auto]]
  - [[#treesit-fold][Treesit Fold]]
- [[#treemacs][TREEMACS]]
- [[#trimming-whitespace][TRIMMING WHITESPACE]]
- [[#vertico][VERTICO]]
  - [[#vertico-posframe][Vertico Posframe]]
- [[#vuiet][VUIET]]
  - [[#lastfm][Last.fm]]
- [[#xref][XREF]]
- [[#which-key][WHICH-KEY]]
- [[#window-management][WINDOW MANAGEMENT]]
- [[#window-numbering][WINDOW NUMBERING]]
- [[#workspaces][WORKSPACES]]

* IMPORTANT PROGRAMS TO LOAD FIRST
To keep this =config.org= a reasonable length, I have moved a lot of code to individual scripts that will be sourced by this config.  These scripts are found in "~/.config/emacs/scripts" and do not contain any code that most people are likely to need to edit.

** Adding the scripts directory to path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs/scripts/")
#+end_src

** Sourcing the scripts
#+begin_src emacs-lisp
(require 'elpaca-setup) ;; The Elpaca Package Manager
(require 'buffer-move)  ;; Buffer-move for better window management
#+end_src

** Transient
#+begin_src emacs-lisp
(use-package transient
  :ensure t)
#+end_src

** Custom File
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "customs.el" user-emacs-directory))
(add-hook 'elpaca-after-init-hook (lambda () (load custom-file 'noerror)))

(setq ismd/custom-file (expand-file-name "custom.el" user-emacs-directory))
(add-hook 'elpaca-after-init-hook (lambda () (load ismd/custom-file 'noerror)))
#+end_src

** Themes
*** Init Themes
#+begin_src emacs-lisp
(org-babel-load-file
  (expand-file-name
    "scripts/themes.org"
    user-emacs-directory))
#+end_src

*** Load Theme
#+begin_src emacs-lisp
(defvar theme-name 'modus-operandi "The name of the theme to use")
(when (file-exists-p "~/.config/emacs/theme.el")
  (load-file "~/.config/emacs/theme.el"))
(add-hook 'elpaca-after-init-hook
          (lambda ()
            (load-theme theme-name t)))
#+end_src

** LSP Keymap Init
This variable must be set before the =lsp= package is loaded.

#+begin_src emacs-lisp
(setq lsp-keymap-prefix "C-c l")
#+end_src

** Useful Functions
#+begin_src emacs-lisp
(defun ismd/add-display-buffer-rule (buffer-name &optional window-width)
  "Add a display-buffer rule for BUFFER-NAME with optional WINDOW-WIDTH (default 0.35)."
  (let ((width (or window-width 0.35)))
    (add-to-list 'display-buffer-alist
                 `(,buffer-name
                   (display-buffer-in-side-window)
                   (side . right)
                   (window-width . ,width)
                   (window-parameters . ((no-delete-other-windows . t)))))))

(defvar-local temporary-buffer-p nil
  "Non-nil if this buffer is a temporary buffer that should be closed when switching away.")

(defun find-file-temporarily (filename)
  "Open a file temporarily. The buffer will be automatically closed when switching to another buffer."
  (interactive "FFind file temporarily: ")
  (let ((buffer (find-file-noselect filename)))
    (with-current-buffer buffer
      (setq-local temporary-buffer-p t)
      (setq-local buffer-read-only t)) ; Make it read-only to prevent accidental edits
    (switch-to-buffer buffer)))

(defvar temporary-buffer-cleanup-in-progress nil
  "Guard variable to prevent infinite recursion during cleanup.")

(defun temporary-buffer-cleanup ()
  "Clean up temporary buffers when switching away from them."
  (unless temporary-buffer-cleanup-in-progress
    (let ((temporary-buffer-cleanup-in-progress t)
          (prev-buffer (other-buffer (current-buffer) t)))
      (when (and prev-buffer
                 (buffer-live-p prev-buffer)
                 (buffer-local-value 'temporary-buffer-p prev-buffer))
        (kill-buffer prev-buffer)))))

(add-hook 'buffer-list-update-hook #'temporary-buffer-cleanup)
#+end_src

* AI
** Aider
https://github.com/tninja/aider.el

#+begin_src emacs-lisp
;; (use-package aider
;;   :after (magit transient)
;;   :ensure (:host github :repo "tninja/aider.el" :files ("aider.el" "aider-core.el" "aider-file.el" "aider-code-change.el" "aider-discussion.el" "aider-prompt-mode.el")))
#+end_src

** chatgpt-shell
https://github.com/xenodium/chatgpt-shell

#+begin_src emacs-lisp
(use-package chatgpt-shell
  :ensure t
  :custom
  ((chatgpt-shell-anthropic-key #'anthropic-api-key)
   (chatgpt-shell-model-version "claude-sonnet-4-20250514")))
#+end_src

** Claude Code
https://github.com/stevemolitor/claude-code.el

#+begin_src emacs-lisp
(use-package eat
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(defun ismd/claude-notify (title message)
  "Display a Linux notification using notify-send."
  (if (executable-find "notify-send")
      (call-process "notify-send" nil nil nil title message)
    (message "%s: %s" title message)))

(defun ismd/claude-notify-with-sound (title message)
  "Display a Linux notification with sound."
  (when (executable-find "notify-send")
    (call-process "notify-send" nil nil nil title message))
  ;; Play sound if paplay is available
  (when (executable-find "paplay")
    (call-process "paplay" nil nil nil "/usr/share/sounds/freedesktop/stereo/message.oga")))

(use-package claude-code
  :ensure (:host github :repo "stevemolitor/claude-code.el" :rev :newest)
  :custom
  (claude-code-program "~/.claude/local/claude")
  ;; (claude-code-notification-function #'ismd/claude-notify)
  (claude-code-notification-function #'ismd/claude-notify-with-sound)
  :config
  (ismd/add-display-buffer-rule "^\\*claude")

  (claude-code-mode))
#+end_src

** elysium
https://github.com/lanceberge/elysium

This package integrates with gptel and provides capability to insert AI results into the current buffer.

#+begin_src emacs-lisp
(use-package elysium
  :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package smerge-mode
  :ensure nil
  :hook
  (prog-mode . smerge-mode))
#+end_src

** GitHub Copilot
https://github.com/copilot-emacs/copilot.el

#+begin_src emacs-lisp
(use-package copilot
  :after (editorconfig)
  :ensure (:host github :repo "copilot-emacs/copilot.el" :files ("*.el" "dist"))
  :hook
  (prog-mode . copilot-mode)
  (text-mode . copilot-mode)
  (copilot-mode . (lambda ()
                    (setq-local copilot--indent-warning-printed-p t)))
  :custom
  (copilot-indent-offset-warning-disable t))
#+end_src

** GitHub Copilot Chat
https://github.com/chep/copilot-chat.el

#+begin_src emacs-lisp
(use-package copilot-chat
  :ensure t
  :hook (git-commit-setup . copilot-chat-insert-commit-message)
  :custom
  (copilot-chat-backend 'request)
  (copilot-chat-follow nil)
  (copilot-chat-frontend 'shell-maker)
  :config
  (ismd/add-display-buffer-rule "^\\*Copilot Chat")

  (copilot-chat-set-model "o4-mini"))
#+end_src

** gptel
https://github.com/karthink/gptel

#+begin_src emacs-lisp
(use-package gptel
  :ensure t
  :config
  (setq-default gptel-default-mode #'org-mode
                gptel-model 'claude-sonnet-4-20250514
                gptel-backend (gptel-make-anthropic "Claude"
                                :stream t
                                :key #'anthropic-api-key)))
#+end_src

* ALL THE ICONS
#+begin_quote
Currently using =nerd-icons= instead of =all-the-icons=.
#+end_quote

This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
  
#+begin_src emacs-lisp
;; (use-package all-the-icons
;;   :ensure t
;;   :if (display-graphic-p))

;; (use-package all-the-icons-dired
;;   :ensure t
;;   :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* ATOMIC CHROME
https://github.com/KarimAziev/atomic-chrome

#+begin_src emacs-lisp
(use-package atomic-chrome
  :ensure (:host github :repo "KarimAziev/atomic-chrome")
  :init (atomic-chrome-start-server))
#+end_src

* BACKUP 
By default, Emacs creates automatic backups of files in their original directories, such "file.el" and the backup "file.el~".  This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =TRASH= directory.

#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src

* COMPANY
#+begin_quote
Currently using =corfu= instead of =company=.
#+end_quote

[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
;; (use-package company
;;   :ensure t
;;   :defer 2
;;   :diminish
;;   :custom
;;   (company-begin-commands '(self-insert-command))
;;   (company-idle-delay .1)
;;   (company-minimum-prefix-length 2)
;;   (company-show-numbers t)
;;   (company-tooltip-align-annotations 't)
;;   (global-company-mode t))

;; (use-package company-box
;;   :after company
;;   :diminish
;;   :hook (company-mode . company-box-mode))
#+end_src

* CONSULT
https://github.com/minad/consult

#+begin_src emacs-lisp
(use-package consult
  :ensure t

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  (setq consult-project-buffer-sources '(consult--source-project-buffer))

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)

  (add-to-list 'consult-buffer-filter "^\\*"))
#+end_src

** Embark Consult
#+begin_src emacs-lisp
(use-package embark-consult
  :ensure t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* CORFU
https://github.com/minad/corfu

#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode))
#+end_src

** CAPE
https://github.com/minad/cape

Seems like LSP works well and I don't need this.

* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :demand t
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "~/Pictures/avatar.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-projects-backend 'project-el)
  (setq dashboard-items '((recents . 5)
                          ;; (agenda . 5 )
                          ;; (bookmarks . 5)
                          (projects . 5)
                          (registers . 5)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
  (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
  (dashboard-setup-startup-hook))
#+end_src

* DELETE WORD AND LINE
#+begin_src emacs-lisp
;; Delete word
(defun ismd/delete-word (arg)
  "Delete characters forward until encountering the end of a word.
With argument ARG, do this that many times."
  (interactive "p")
  (delete-region (point) (progn (forward-word arg) (point))))

;; Delete word backward
(defun ismd/delete-word-backward (arg)
  "Delete characters backward until encountering the end of a word.
With argument ARG, do this that many times."
  (interactive "p")
  (ismd/delete-word (- arg)))

;; Delete line
(defun ismd/delete-line ()
  "Delete text from current position to end of line char.
If at end of line, delete the following newline char."
  (interactive)
  (let ((end (line-end-position)))
    (when (eolp)
      (delete-char 1))
    (delete-region (point) end)))
#+end_src

* DENOTE
https://github.com/protesilaos/denote

#+begin_src emacs-lisp
(use-package denote
  :ensure t
  :hook (dired-mode . denote-dired-mode)
  :config
  (setq denote-date-prompt-use-org-read-date t)
  (setq denote-directory (expand-file-name "~/Nextcloud/Notes/"))
  (setq denote-infer-keywords t)
  (setq denote-known-keywords '("it" "people" "private"))
  (denote-rename-buffer-mode 1))
#+end_src

* DESKTOP SAVE
This is a package that saves the state of your Emacs session, including open files, buffers, and window configurations, so that you can restore it later.

#+begin_src emacs-lisp
(desktop-save-mode 1)
#+end_src

* DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
(use-package diminish
  :ensure t)
#+end_src

* DIRVISH
https://github.com/alexluigit/dirvish

#+begin_src emacs-lisp
(use-package dirvish
  :ensure t
  :after nerd-icons
  :hook
  (dirvish-directory-view-mode . (lambda ()
                                   (tab-line-mode -1)
                                   (visual-line-mode -1)
                                   (set-face-attribute 'dirvish-subtree-guide nil
                                                       :foreground (face-background 'default))))
  (dired-mode-hook . (lambda ()
                       (tab-line-mode -1)
                       (visual-line-mode -1)
                       (set-face-attribute 'dirvish-subtree-guide nil
                                           :foreground (face-background 'default))))
  :init
  (dirvish-override-dired-mode)
  ;; :custom
  ;; (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
  ;;  '(("h" "~/"                          "Home")
  ;;    ("d" "~/Downloads/"                "Downloads")))
  :config
  ;; (dirvish-peek-mode) ; Preview files in minibuffer
  (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
  (setq dirvish-mode-line-format
        '(:left (sort symlink) :right (omit yank index)))
  (setq dirvish-attributes
        '(nerd-icons file-time file-size collapse subtree-state vc-state))
  (setq dirvish-subtree-state-style 'nerd)
  (setq delete-by-moving-to-trash t)
  (setq dirvish-path-separators (list
                                 (format "  %s " (nerd-icons-codicon "nf-cod-home"))
                                 (format "  %s " (nerd-icons-codicon "nf-cod-root_folder"))
                                 (format " %s " (nerd-icons-faicon "nf-fa-angle_right"))))
  (setq dired-listing-switches
        "-l --almost-all --human-readable --group-directories-first --no-group")
  (setq dirvish-side-width 25)
  :bind ; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
  (;; ("C-c f" . dirvish-fd)
   :map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
   ("a"   . dirvish-quick-access)
   ("f"   . dirvish-file-info-menu)
   ("y"   . dirvish-yank-menu)
   ("N"   . dirvish-narrow)
   ("^"   . dirvish-history-last)
   ("h"   . dirvish-history-jump) ; remapped `describe-mode'
   ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
   ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
   ("RET" . dired-find-alternate-file)
   ("TAB" . dirvish-subtree-toggle)
   ("DEL" . dired-up-directory)
   ("M-f" . dirvish-history-go-forward)
   ("M-b" . dirvish-history-go-backward)
   ("M-l" . dirvish-ls-switches-menu)
   ("M-m" . dirvish-mark-menu)
   ("M-t" . dirvish-layout-toggle)
   ("M-s" . dirvish-setup-menu)
   ("M-e" . dirvish-emerge-menu)
   ("M-j" . dirvish-fd-jump)))
#+end_src

* EDIFF
#+begin_src emacs-lisp
(setq ediff-split-window-function 'split-window-horizontally)
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

* EDITORCONFIG
https://github.com/editorconfig/editorconfig-emacs

#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :diminish
  :config
  (editorconfig-mode 1))
#+end_src

* EMBARK
https://github.com/oantolin/embark

#+begin_src emacs-lisp
(use-package embark
  :ensure t
  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+end_src

* DIRENV
https://github.com/purcell/envrc

#+begin_src emacs-lisp
(use-package envrc
  :ensure t
  :init
  (envrc-global-mode))
#+end_src

* EXPAND REGION
https://github.com/magnars/expand-region.el

#+begin_src emacs-lisp
(use-package expand-region
  :ensure t)
#+end_src

* FLYCHECK
Install =luacheck= from your Linux distro's repositories for flycheck to work correctly with lua files.  Install =python-pylint= for flycheck to work with python files.  Haskell works with flycheck as long as =haskell-ghc= or =haskell-stack-ghc= is installed.  For more information on language support for flycheck, [[https://www.flycheck.org/en/latest/languages.html][read this]].

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src

* FONTS
Defining the various fonts that Emacs will use.

** Setting the Font Face
#+begin_src emacs-lisp
(defun ismd/set-fonts ()
  "Set the fonts for Emacs."
  (set-face-attribute 'default nil
                      :font "CodeNewRoman Nerd Font Mono"
                      :height 150
                      :weight 'regular)
  (set-face-attribute 'variable-pitch nil
                      :font "RobotoMono Nerd Font"
                      :height 150
                      :weight 'regular)
  (set-face-attribute 'fixed-pitch nil
                      :font "CodeNewRoman Nerd Font Mono"
                      :height 150
                      :weight 'regular)

  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  (set-frame-font "CodeNewRoman Nerd Font Mono-15" nil t)

  ;; tab-bar
  (set-face-attribute 'tab-bar-tab nil
                      :inherit 'unspecified))

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (ismd/set-fonts))))
  (ismd/set-fonts))

(add-to-list 'default-frame-alist '(font . "CodeNewRoman Nerd Font Mono-15"))
#+end_src

** Zooming In/Out
You can use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* GENERAL KEYBINDINGS
#+begin_src emacs-lisp
(use-package general
  :ensure (:wait t)
  :demand t
  :config
  (general-define-key

   "C-=" '(text-scale-increase :wk "Increase font size")
   "C--" '(text-scale-decrease :wk "Decrease font size")
   "C-0" '(text-scale-adjust :wk "Adjust font size")
   ;; "C-1" '((lambda () (interactive) (tab-bar-select-tab 1)) :wk "Select tab 1")
   ;; "C-2" '((lambda () (interactive) (tab-bar-select-tab 2)) :wk "Select tab 2")
   ;; "C-3" '((lambda () (interactive) (tab-bar-select-tab 3)) :wk "Select tab 3")
   ;; "C-4" '((lambda () (interactive) (tab-bar-select-tab 4)) :wk "Select tab 4")
   ;; "C-5" '((lambda () (interactive) (tab-bar-select-tab 5)) :wk "Select tab 5")
   ;; "C-6" '((lambda () (interactive) (tab-bar-select-tab 6)) :wk "Select tab 6")
   ;; "C-7" '((lambda () (interactive) (tab-bar-select-tab 7)) :wk "Select tab 7")
   ;; "C-8" '((lambda () (interactive) (tab-bar-select-tab 8)) :wk "Select tab 8")
   ;; "C-9" '((lambda () (interactive) (tab-bar-select-tab 9)) :wk "Select tab 9")

   "C-<tab>" '(tab-line-switch-to-next-tab :wk "Switch to next tab")
   "C-<iso-lefttab>" '(tab-line-switch-to-prev-tab :wk "Switch to previous tab")

   "C-S-r" '((lambda () (interactive) (revert-buffer nil t)) :wk "Reload buffer")
   "C-<" '(previous-buffer :wk "Previous buffer")
   "C->" '(next-buffer :wk "Next buffer")

   "C-;" '(complete-symbol :wk "Complete symbol")
   "C-a" '(mwim-beginning-of-code-or-line :wk "Beginning of line or indentation")
   "C-e" '(mwim-end-of-line-or-code :wk "End of line or indentation")
   "C-k" '(ismd/delete-line :wk "Delete line")
   "C-s" '((lambda () (interactive) (consult-line nil 1)) :wk "Search for string")

   "M-/" '(hippie-expand :wk "Hippie expand")
   "M-<backspace>" '(ismd/delete-word-backward :wk "Delete word backward")
   "M-d" '(ismd/delete-word :wk "Delete word")
   "M-n" '((lambda () (interactive) (scroll-up-command 3)) :wk "Scroll down")
   "M-p" '((lambda () (interactive) (scroll-down-command 3)) :wk "Scroll up")
   "M-s" '(avy-goto-char-timer :wk "Jump to character")
   "M-y" '(consult-yank-pop :wk "Yank pop")

   "M-0" '(treemacs-select-window :wk "Treemacs")
   ;; "M-0" '(winum-select-window-0-or-10 :wk "Select window 0 or 10")
   "M-1" '(winum-select-window-1 :wk "Select window 1")
   "M-2" '(winum-select-window-2 :wk "Select window 2")
   "M-3" '(winum-select-window-3 :wk "Select window 3")
   "M-4" '(winum-select-window-4 :wk "Select window 4")
   "M-5" '(winum-select-window-5 :wk "Select window 5")
   "M-6" '(winum-select-window-6 :wk "Select window 6")
   "M-7" '(winum-select-window-7 :wk "Select window 7")
   "M-8" '(winum-select-window-8 :wk "Select window 8")
   "M-9" '(winum-select-window-9 :wk "Select window 9")
   )

  ;;
  ;; C-x
  ;;
  (general-create-definer ismd/leader-keys-C-x
    :prefix "C-x"
    :keymaps 'override)

  (ismd/leader-keys-C-x
    "b" '(consult-project-buffer :wk "Switch buffer")
    "B" '(consult-buffer-other-window :wk "Switch buffer other window")
    "k" '(kill-current-buffer :wk "Kill this buffer")
    "K" '(kill-buffer-and-window :wk "Kill buffer"))

  ;;
  ;; C-c
  ;;
  (general-create-definer ismd/leader-keys
    :prefix "C-c"
    :keymaps 'override)

  (ismd/leader-keys
    "." '(embark-act :wk "Embark act")
    "=" '(er/expand-region :wk "Expand region")
    "+" '(er/expand-region :wk "Expand region")
    "-" '(er/contract-region :wk "Contract region")
    "C-=" '(er/expand-region :wk "Expand region")
    "C--" '(er/contract-region :wk "Contract region")
    "C-r" '(vertico-repeat :wk "Vertico repeat")
    "M-x" '(consult-mode-command :wk "Consult command")
    "RET" '(:keymap claude-code-command-map :wk "Claude Code")
    "TAB" '(indent-rigidly :wk "Indent region"))

  (ismd/leader-keys
    "a" '(:ignore t :wk "AI")
    "a a" '(aider-transient-menu :wk "Aider transient menu")
    "a c" '(:ignore t :wk "Copilot Chat")
    "a c RET" '(copilot-chat-display :wk "Chat display")
    "a c M-RET" '(copilot-chat-transient :wk "Copilot chat transient")
    "a c b" '(copilot-chat-transient-buffers :wk "Buffers")
    "a c c" '(copilot-chat-transient-code :wk "Code")
    "a g" '(:ignore t :wk "GPTel")
    "a g RET" '(gptel :wk "GPTel")
    "a g M-RET" '(gptel-menu :wk "GPTel menu")
    "a g a" '(gptel-add :wk "GPTel add")
    "a g g" '(gptel-send :wk "Send to GPTel")
    "a g f" '(gptel-add-file :wk "GPTel add file")
    "a g r" '(gptel-rewrite :wk "GPTel rewrite")
    "a l" '(:keymap claude-code-command-map :wk "Claude Code"))

  (ismd/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b I" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-current-buffer :wk "Kill this buffer")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '((lambda () (interactive) (revert-buffer nil t)) :wk "Reload buffer")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

  (ismd/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d t" '(treemacs-select-directory :wk "Open directory in treemacs"))

  (ismd/leader-keys
    "e" '(:ignore t :wk "Embark/Evaluate")
    "e c" '(embark-collect :wk "Embark collect")
    "e e" '(embark-export :wk "Embark export")
    "e l" '(embark-live :wk "Embark live")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e s" '(eshell :which-key "Eshell"))

  (defun ismd/delete-this-file ()
    "Delete the file associated with the current buffer and kill the buffer with confirmation."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if filename
          (if (y-or-n-p (format "Are you sure you want to delete %s? " filename))
              (progn
                (delete-file filename)
                (message "Deleted file %s" filename)
                (kill-current-buffer))
            (message "Canceled"))
        (message "Not a file"))))

  (ismd/leader-keys
    "f" '(:ignore t :wk "Files")
    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Open emacs config.org")
    "f D" '(ismd/delete-this-file :wk "Delete this file")
    "f e" '((lambda () (interactive) (dired "~/.config/emacs")) :wk "Open user-emacs-directory in dired")
    "f f" '(find-file :wk "Find file")
    "f F" '(find-file-temporarily :wk "Find file temporarily")
    "f j" '(consult-fd :wk "Find file with fd")
    "f l" '(consult-locate :wk "Locate a file")
    "f r" '(consult-recent-file :wk "Recent file")
    "f R" '(rename-visited-file :wk "Rename file")
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit this file")
    "f x" '(scratch-buffer :wk "Scratch buffer"))

  (ismd/leader-keys
    "h" '(:ignore t :wk "Help")
    "h b" '(describe-bindings :wk "Describe bindings")
    "h c" '(describe-char :wk "Describe character under cursor")
    ;; "h f" '(describe-function :wk "Describe function")
    "h F" '(describe-face :wk "Describe face")
    "h g" '(describe-gnu-project :wk "Describe GNU Project")
    "h i" '(consult-info :wk "Info")
    "h I" '(describe-input-method :wk "Describe input method")
    ;; "h k" '(describe-key :wk "Describe key")
    "h K" '(describe-keymap :wk "Describe keymap")
    "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive)
                (load-file "~/.config/emacs/init.el")
                (ignore (elpaca-process-queues)))
              :wk "Reload emacs config")
    "h t" '(consult-theme :wk "Load theme")
    ;; "h v" '(describe-variable :wk "Describe variable")
    "h w" '(where-is :wk "Prints keybinding for command if set")
    "h x" '(describe-command :wk "Display full documentation for command"))

  (ismd/leader-keys
    "m" '(:ignore t :wk "Multiple cursors")
    "m a" '(mc/mark-all-like-this :wk "Mark all like this")
    "m d" '(mc/mark-all-dwim :wk "Mark all dwim")
    "m l" '(mc/edit-lines :wk "Edit lines"))

  (ismd/leader-keys
    "M" '(:ignore t :wk "Music")
    "M a" '(vuiet-play-artist :wk "Play artist")
    "M A" '(vuiet-play-album :wk "Play album")
    ;; "M c" '(vuiet-info-playing-track-album :wk "Currently playing track album")
    "M g" '(vuiet-play-tag-similar :wk "Play tag")
    "M i" '(:ignore t :wk "Info")
    "M i a" '(vuiet-artist-info :wk "Artist info")
    "M i A" '(vuiet-album-info :wk "Album info")
    "M i t" '(vuiet-tag-info :wk "Tag info")
    "M l" '(vuiet-playing-track-lyrics :wk "Playing track lyrics")
    "M p" '(:ignore t :wk "Player")
    "M p l" '(vuiet-love-track :wk "Love track")
    "M p L" '(vuiet-love-unlove-track :wk "Unlove track")
    "M p n" '(vuiet-next :wk "Next")
    "M p s" '(vuiet-stop :wk "Stop")
    "M p p" '(vuiet-play-pause :wk "Play/pause")
    "M r" '(vuiet-play-loved-tracks-similar :wk "Play similar loved tracks")
    "M s" '(vuiet-play-artist-similar :wk "Play similar artist")
    ;; "M S" '(vuiet-play-playing-artist-similar :wk "Play similar currently playing artist")
    "M t" '(vuiet-play-track :wk "Play track")
    "M T" '(vuiet-play-track-search :wk "Play track search"))

  (ismd/leader-keys
    "n" '(:ignore t :wk "Notes")
    "n b" '(denote-backlinks :wk "Backlinks")
    "n d" '(denote-dired :wk "Dired")
    "n f" '(denote-open-or-create :wk "Open or create note")
    "n g" '(denote-grep :wk "Grep")
    "n l" '(denote-link :wk "Link")
    "n n" '(denote :wk "Denote")
    "n N" '(denote-subdirectory :wk "Denote subdirectory")
    "n r" '(denote-rename-file :wk "Rename file"))

  (ismd/leader-keys
    "o" '(:ignore t :wk "Org")
    "o a" '(org-agenda :wk "Org agenda")
    "o b" '(:ignore t :wk "Tables")
    "o b -" '(org-table-insert-hline :wk "Insert hline in table")
    "o B" '(org-babel-tangle :wk "Org babel tangle")
    "o d" '(:ignore t :wk "Date/deadline")
    "o d t" '(org-time-stamp :wk "Org time stamp")
    "o e" '(org-export-dispatch :wk "Org export dispatch")
    "o i" '(org-toggle-item :wk "Org toggle item")
    "o o" '(org-emphasize :wk "Org emphasize")
    "o t" '(org-todo :wk "Org todo")
    "o T" '(org-todo-list :wk "Org todo list")
    "o x" '(org-toggle-checkbox :wk "Org toggle checkbox"))

  (ismd/leader-keys
    "p" '(:keymap project-prefix-map :wk "Project"))

  (ismd/leader-keys
    "q" '(:ignore t :wk "Quit")
    "q f" '(delete-frame :wk "Delete frame")
    "q q" '(save-buffers-kill-emacs :wk "Quit Emacs")
    "q r" '(restart-emacs :wk "Restart Emacs"))

  (ismd/leader-keys
    "s" '(:ignore t :wk "Search")
    "s d" '(rg :wk "Ripgrep in directory")
    "s g" '(consult-grep :wk "Grep")
    "s m" '(consult-man :wk "Man pages")
    "s p" '(rg-project :wk "Ripgrep in project")
    "s r" '(consult-ripgrep :wk "Consult ripgrep")
    "s t" '(tldr :wk "Lookup TLDR docs for a command"))

  (ismd/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(treemacs-add-and-display-current-project-exclusively :wk "Treemacs project")
    ;; "t t" '(dirvish-side :wk "Dirvish side")
    "t v" '(vterm-toggle :wk "Toggle vterm")
    "t w" '(visual-line-mode :wk "Toggle word wrap"))

  (ismd/leader-keys
    "v" '(:ignore t :wk "Version control")
    "v /" '(magit-dispatch :wk "Magit dispatch")
    "v ." '(magit-file-dispatch :wk "Magit file dispatch")
    "v g" '(magit-status :wk "Magit status")
    "v m" '(magit-git-mergetool :wk "Magit git mergetool")
    "v t" '(git-timemachine :wk "Git time machine"))

  (ismd/leader-keys
    "w" '(:ignore t :wk "Workspaces/Windows")
    "w c" '(tabspaces-open-or-create-project-and-workspace :wk "Open or create project and workspace")
    "w k" '(tabspaces-kill-buffers-close-workspace :wk "Kill buffers and close workspace")
    "w m" '(:ignore t :wk "Move")
    "w m b" '(buf-move-left :wk "Buffer move left")
    "w m n" '(buf-move-down :wk "Buffer move down")
    "w m p" '(buf-move-up :wk "Buffer move up")
    "w m f" '(buf-move-right :wk "Buffer move right")
    "w s" '(ismd/window-split-toggle :wk "Toggle window split")
    "w w" '(:ignore t :wk "Tabspaces")
    "w w C" '(tabspaces-clear-buffers :wk "Tabspaces clear buffers"))

  (ismd/leader-keys
    "C-f" '(:ignore t :wk "Fold")
    "C-f C-f" '(treesit-fold-toggle :wk "Fold")
    "C-f C-a C-f" '(treesit-fold-close-all :wk "Fold all")
    "C-f C-a C-u" '(treesit-fold-open-all :wk "Unfold all"))

  ;;
  ;; M-g
  ;;
  (general-create-definer ismd/leader-keys-M-g
    :prefix "M-g")

  (ismd/leader-keys-M-g
    "g" '(consult-goto-line :wk "Go to line")
    "i" '(consult-imenu :wk "Imenu")
    "I" '(consult-imenu-multi :wk "Imenu multi")
    "o" '(consult-outline :wk "Outline"))

  ;;
  ;; Comint
  ;;
  (general-define-key
   :keymaps 'comint-mode-map
   "C-S-n" '(comint-next-prompt :wk "Next prompt")
   "C-S-p" '(comint-previous-prompt :wk "Previous prompt")
   "M-n" nil
   "M-p" nil)

  ;;
  ;; Copilot
  ;;
  (general-define-key
   :keymaps 'copilot-completion-map
   "TAB" '(copilot-accept-completion :wk "Accept completion")
   "C-e" '(copilot-accept-completion-by-line :wk "Accept completion by line")
   "C-g" '(copilot-clear-overlay :wk "Clear overlay")
   "C-c C-n" '(copilot-next-completion :wk "Next completion")
   "C-c C-p" '(copilot-previous-completion :wk "Previous completion")
   "M-f" '(copilot-accept-completion-by-word :wk "Accept completion by word"))

  ;;
  ;; Copilot Chat
  ;;
  (general-define-key
   :keymaps 'copilot-chat-prompt-mode-map
   "M-n" nil
   "M-p" nil)

  ;;
  ;; Corfu
  ;;
  (general-define-key
   :keymaps 'corfu-map
   "TAB" nil
   "<tab>" nil)

  ;;
  ;; Eat
  ;;
  (general-define-key
   :keymaps 'eat-semi-char-mode-map
   ;; "C-n" nil
   ;; "C-p" nil
   "M-n" nil
   "M-p" nil
   "M-1" nil
   "M-2" nil
   "M-3" nil
   "M-4" nil
   "M-5" nil
   "M-6" nil
   "M-7" nil
   "M-8" nil
   "M-9" nil
   "M-0" nil)

  ;;
  ;; Git
  ;;
  (general-define-key
   :keymaps 'git-commit-mode-map
   "C-c v c" '(magit-generate-changelog :wk "Generate changelog"))

  ;;
  ;; Ibuffer
  ;;
  (general-define-key
   :keymaps 'ibuffer-mode-map
   "TAB" '(ibuffer-toggle-filter-group :wk "Toggle filter group")
   "C-S-n" '(ibuffer-forward-filter-group :wk "Next filter group")
   "C-S-p" '(ibuffer-backward-filter-group :wk "Previous filter group"))

  ;;
  ;; Indent Rigidly
  ;;
  (general-define-key
   :keymaps 'indent-rigidly-map
   "b" '(indent-rigidly-left :wk "Indent left")
   "B" '(indent-rigidly-left-to-tab-stop :wk "Indent left to tab stop")
   "f" '(indent-rigidly-right :wk "Indent right")
   "F" '(indent-rigidly-right-to-tab-stop :wk "Indent right to tab stop"))

  ;;
  ;; JavaScript
  ;;
  (general-define-key
   :keymaps 'js-ts-mode-map
   "M-." '(xref-find-definitions :wk "Find definitions"))

  ;;
  ;; Magit
  ;;
  (general-define-key
   :keymaps 'magit-mode-map
   "C-<tab>" nil
   "M-1" nil
   "M-2" nil
   "M-3" nil
   "M-4" nil
   "M-5" nil
   "M-6" nil
   "M-7" nil
   "M-8" nil
   "M-9" nil
   "M-0" nil
   "M-n" nil
   "M-p" nil)

  ;;
  ;; Makefile
  ;;
  (general-define-key
   :keymaps 'makefile-mode-map
   "M-n" nil
   "M-p" nil)

  ;;
  ;; Markdown
  ;;
  (general-define-key
   :keymaps 'markdown-mode-map
   "M-n" nil
   "M-p" nil
   "C-S-n" '(markdown-outline-next :wk "Next heading")
   "C-S-p" '(markdown-outline-previous :wk "Previous heading"))

  ;;
  ;; Org
  ;;
  (general-define-key
   :keymaps 'org-mode-map
   "M-g a" '(consult-org-agenda :wk "Org agenda")
   "M-g o" '(consult-org-heading :wk "Org heading")
   "C-M-i" '(completion-at-point :wk "Complete at point")
   "C-S-n" '(org-forward-heading-same-level :wk "Next heading")
   "C-S-p" '(org-backward-heading-same-level :wk "Previous heading"))

  ;;
  ;; Polymode
  ;;
  (general-define-key
   :keymaps 'polymode-mode-map
   "M-n" nil
   "M-p" nil)

  ;;
  ;; Projectile
  ;;
  ;; (general-define-key
  ;;  :keymaps 'projectile-command-map
  ;;  "b" '(consult-project-buffer :wk "Switch buffer in project")
  ;;  "s r" '(rg-project :wk "Ripgrep in project")
  ;;  "t" '(treemacs-add-and-display-current-project-exclusively :wk "Show project in treemacs"))

  ;;
  ;; Rg
  ;;
  (general-define-key
   :keymaps 'rg-mode-map
   "n" '(compilation-next-error :wk "Move to next line with a match")
   "p" '(compilation-previous-error :wk "Move to previous line with a match")
   "C-c n" '(rg-next-file :wk "Move to next file with a match")
   "C-c p" '(rg-prev-file :wk "Move to previous file with a match"))

  ;;
  ;; Vterm
  ;;
  (general-define-key
   :keymaps 'vterm-mode-map
   "M-1" nil
   "M-2" nil
   "M-3" nil
   "M-4" nil
   "M-5" nil
   "M-6" nil
   "M-7" nil
   "M-8" nil
   "M-9" nil
   "M-0" nil))
#+end_src

** Cyrillic Keybindings
#+begin_src emacs-lisp
(define-key key-translation-map (kbd "C-а") (kbd "C-f"))
(define-key key-translation-map (kbd "C-и") (kbd "C-b"))
(define-key key-translation-map (kbd "C-т") (kbd "C-n"))
(define-key key-translation-map (kbd "C-з") (kbd "C-p"))

(define-key key-translation-map (kbd "M-а") (kbd "M-f"))
(define-key key-translation-map (kbd "M-и") (kbd "M-b"))
(define-key key-translation-map (kbd "M-т") (kbd "M-n"))
(define-key key-translation-map (kbd "M-з") (kbd "M-p"))

(define-key key-translation-map (kbd "C-ф") (kbd "C-a"))
(define-key key-translation-map (kbd "C-у") (kbd "C-e"))

(define-key key-translation-map (kbd "C-в") (kbd "C-d"))
(define-key key-translation-map (kbd "M-в") (kbd "M-d"))

(define-key key-translation-map (kbd "C-.") (kbd "C-/"))
(define-key key-translation-map (kbd "M-Ю") (kbd "M->"))
(define-key key-translation-map (kbd "M-Б") (kbd "M-<"))
#+end_src

* GIT
** Diff Hl
https://github.com/dgutov/diff-hl

#+begin_src emacs-lisp
;; (use-package diff-hl
;;   :ensure t
;;   :hook ((dired-mode . diff-hl-dired-mode)
;;          (magit-pre-refresh . diff-hl-magit-pre-refresh)
;;          (magit-post-refresh . diff-hl-magit-post-refresh))
;;   :config
;;   (global-diff-hl-mode))
#+end_src

** Git Gutter
https://github.com/emacsorphanage/git-gutter

#+begin_src emacs-lisp
(use-package git-gutter
  :ensure t
  :custom
  (git-gutter:modified-sign " ")
  (git-gutter:added-sign " ")
  (git-gutter:deleted-sign " ")
  :config
  (global-git-gutter-mode t))
#+end_src

** Git Time Machine
[[https://github.com/emacsmirror/git-timemachine][git-timemachine]] is a program that allows you to move backwards and forwards through a file's commits.  'SPC g t' will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use 'CTRL-j' and 'CTRL-k' to move backwards and forwards through the commits.

#+begin_src emacs-lisp
(use-package git-timemachine
  :ensure t
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook))
#+end_src

** Magit
[[https://magit.vc/manual/][Magit]] is a full-featured git client for Emacs.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :demand t
  :custom
  (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
  ;; (transient-display-buffer-action '(display-buffer-below-selected))
  )
#+end_src

* HIGHLIGHT INDENT GUIDES
https://github.com/DarthFennec/highlight-indent-guides

#+begin_src emacs-lisp
;; (use-package highlight-indent-guides
;;   :ensure t
;;   :diminish
;;   :hook
;;   (prog-mode . highlight-indent-guides-mode)
;;   (yaml-ts-mode . highlight-indent-guides-mode)
;;   :custom
;;   (highlight-indent-guides-method 'character))
#+end_src

* HIGHLIGHT TODO
Adding highlights to TODO and related words.

#+begin_src emacs-lisp
(use-package hl-todo
  :ensure t
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

* HIPPIE EXPAND
#+begin_src emacs-lisp
(setq hippie-expand-try-functions-list
      '(try-complete-file-name-partially
        try-complete-file-name
        try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))
#+end_src

* IBUFFER
#+begin_src emacs-lisp
(add-hook 'ibuffer-mode-hook
          (lambda ()
            (display-line-numbers-mode -1)
            (visual-line-mode -1)))
#+end_src

** Ibuffer Project
#+begin_src emacs-lisp
(use-package ibuffer-project
  :ensure t
  :hook
  (ibuffer . (lambda ()
               (visual-line-mode -1)
               (setq ibuffer-filter-groups (ibuffer-project-generate-filter-groups))
               (unless (eq ibuffer-sorting-mode 'project-file-relative)
                 (ibuffer-do-sort-by-project-file-relative)))))
#+end_src

** Ibuffer Projectile
#+begin_quote
Currently using =project.el= instead of =projectile=.
#+end_quote

https://github.com/purcell/ibuffer-projectile

#+begin_src emacs-lisp
;; (use-package ibuffer-projectile
;;   :ensure t
;;   :config
;;   (setq ibuffer-projectile-prefix "Project: ")
;;   :hook
;;   (ibuffer . (lambda ()
;;                (visual-line-mode -1)
;;                (ibuffer-projectile-set-filter-groups))))
#+end_src

* KUBERNETES
https://github.com/kubernetes-el/kubernetes-el

#+begin_src emacs-lisp
(use-package kubernetes
  :ensure t
  :commands (kubernetes-overview)
  :config
  (setq kubernetes-poll-frequency 3600
        kubernetes-redraw-frequency 3600))
#+end_src

* LANGUAGE SUPPORT
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL.  Other languages will require you to install additional modes.

** Dart
https://github.com/emacsorphanage/dart-mode
https://emacs-lsp.github.io/lsp-dart/

#+begin_src emacs-lisp
(use-package dart-mode
  :ensure t)

(use-package lsp-dart
  :ensure t
  :custom
  (lsp-dart-sdk-dir "~/src/flutter/bin/cache/dart-sdk"))
#+end_src

*** FLUTTER
https://github.com/amake/flutter.el

#+begin_src emacs-lisp
(use-package flutter
  :ensure t
  :after dart-mode
  :bind (:map dart-mode-map
              ("C-M-x" . #'flutter-run-or-hot-reload))
  :custom
  (flutter-sdk-path "~/src/flutter"))
#+end_src

**** Hover
https://github.com/ericdallo/hover.el
Seems like hover is for desktop only, so I don't use it on my mobile devices.

#+begin_src emacs-lisp
;; (use-package hover
;;   :ensure t
;;   :after (dart-mode flutter)
;;   :bind (:map flutter-mode-map
;;               ("C-c C-h" . hover))
;;   :custom
;;   (hover-hot-reload-on-save nil))
#+end_src

** Fish
https://github.com/emacsmirror/fish-mode

#+begin_src emacs-lisp
(use-package fish-mode
  :ensure t)
#+end_src

** Go
https://github.com/dominikh/go-mode.el

#+begin_src emacs-lisp
(use-package go-mode
  :ensure t)
#+end_src

** JSON
Using =json-ts-mode= instead of =json-mode=.

#+begin_src emacs-lisp
;; (use-package json-mode
;;   :ensure t)
#+end_src

** Markdown
*** Grip
https://github.com/seagle0128/grip-mode

#+begin_src emacs-lisp
(use-package grip-mode
  :ensure t
  :bind (:map markdown-mode-command-map
              ("g" . grip-mode)))
#+end_src

*** Unhighlight
#+begin_src emacs-lisp
;; (defvar nb/current-line '(0 . 0)
;;   "(start . end) of current line in current buffer")
;; (make-variable-buffer-local 'nb/current-line)

;; (defun nb/unhide-current-line (limit)
;;   "Font-lock function"
;;   (let ((start (max (point) (car nb/current-line)))
;;         (end (min limit (cdr nb/current-line))))
;;     (when (< start end)
;;       (remove-text-properties start end
;;                       '(invisible t display "" composition ""))
;;       (goto-char limit)
;;       t)))

;; (defun nb/refontify-on-linemove ()
;;   "Post-command-hook"
;;   (let* ((start (line-beginning-position))
;;          (end (line-beginning-position 2))
;;          (needs-update (not (equal start (car nb/current-line)))))
;;     (setq nb/current-line (cons start end))
;;     (when needs-update
;;       (font-lock-fontify-block 3))))

;; (defun nb/markdown-unhighlight ()
;;   "Enable markdown concealling"
;;   (interactive)
;;   (markdown-toggle-markup-hiding 'toggle)
;;   (font-lock-add-keywords nil '((nb/unhide-current-line)) t)
;;   (add-hook 'post-command-hook #'nb/refontify-on-linemove nil t))

;; (add-hook 'markdown-mode-hook #'nb/markdown-unhighlight)
#+end_src

** Python
*** Jedi
https://github.com/tkf/emacs-jedi

#+begin_src emacs-lisp

#+end_src

*** Elpy
https://github.com/jorgenschaefer/elpy

#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :init
  (elpy-enable))
#+end_src

*** Pet
https://github.com/wyuenho/emacs-pet

#+begin_src emacs-lisp
(use-package pet
  :ensure t
  :custom
  (python-indent-guess-indent-offset-verbose nil)
  :config
  (add-hook 'python-base-mode-hook 'pet-mode -10))
#+end_src

*** Pyvenv
https://github.com/jorgenschaefer/pyvenv

#+begin_src emacs-lisp
;; (use-package pyvenv
;;   :ensure t
;;   :config
;;   (pyvenv-mode t))
#+end_src

** Terraform
#+begin_src emacs-lisp
(use-package terraform-mode
  :ensure t
  :custom
  (terraform-indent-level 2)
  (terraform-format-on-save t))

;; Doesn't work right now
;; (use-package terraform-ts-mode
;;   :ensure (:host github :repo "kgrotel/terraform-ts-mode")
;;   :custom
;;   (terraform-ts-indent-level 2)
;;   (terraform-ts-format-on-save t))
#+end_src

** YAML
Using =yaml-ts-mode= instead of =yaml-mode=.

#+begin_src emacs-lisp
;; (use-package yaml-mode
;;   :ensure t)
#+end_src

* LSP
https://github.com/emacs-lsp/lsp-mode
https://emacs-lsp.github.io/lsp-mode/

#+begin_src emacs-lisp
(define-derived-mode helm-mode yaml-ts-mode "helm"
  "Major mode for editing kubernetes helm templates")

(use-package lsp-mode
  :ensure t
  :init
  (setq lsp-apply-edits-after-file-operations nil
        lsp-before-save-edits nil
        lsp-completion-enable t
        lsp-completion-enable-additional-text-edit t
        lsp-completion-filter-on-incomplete t
        lsp-completion-no-cache nil
        lsp-completion-provider :none
        lsp-completion-show-detail t
        lsp-completion-show-kind t
        lsp-completion-show-label-description t
        lsp-completion-sort-initial-results t
        lsp-completion-use-last-result t
        lsp-enable-snippet t
        lsp-diagnostics-provider :auto
        lsp-eldoc-enable-hover nil
        lsp-enable-snippet nil
        lsp-enable-symbol-highlighting t
        lsp-headerline-breadcrumb-enable t
        lsp-headerline-breadcrumb-segments '(symbols)
        lsp-keymap-prefix "C-c l"
        lsp-modeline-code-actions-enable t
        lsp-modeline-diagnostics-enable t
        lsp-response-timeout 60
        lsp-signature-auto-activate t
        lsp-signature-render-documentation t
        lsp-ui-doc-enable t
        lsp-ui-doc-show-with-cursor nil
        lsp-ui-doc-show-with-mouse nil
        lsp-ui-sideline-enable nil
        lsp-ui-sideline-show-code-actions nil
        lsp-ui-sideline-show-diagnostics t
        lsp-ui-sideline-show-hover nil)
  (setq lsp-disabled-clients '(tfls))
  :hook ((bash-ts-mode . lsp-deferred)
         (css-ts-mode . lsp-deferred)
         (dart-mode . lsp-deferred)
         (dockerfile-ts-mode . lsp-deferred)
         (go-ts-mode . lsp-deferred)
         (js-ts-mode . lsp-deferred)
         (json-ts-mode . lsp-deferred)
         (python-ts-mode . lsp-deferred)
         (terraform-mode . lsp-deferred)
         (tsx-ts-mode . lsp-deferred)
         (typescript-ts-mode . lsp-deferred)
         (yaml-ts-mode . lsp-deferred)

         (lsp-mode . lsp-enable-which-key-integration))
  :commands (lsp lsp-deferred)
  :config
  (add-to-list 'lsp-language-id-configuration '(helm-mode . "helm"))

  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("helm_ls" "serve"))
                    :activation-fn (lsp-activate-on "helm")
                    :server-id 'helm-ls)))
#+end_src

** LSP UI
#+begin_src emacs-lisp
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)
;; if you are helm user
;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src

** LSP Treemacs
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :ensure t
  :commands lsp-treemacs-errors-list)
#+end_src

** LSP Dap Mode
#+begin_src emacs-lisp
(use-package dap-mode
  :ensure t)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+end_src

* MARGINALIA
marginalia.el - Marginalia in the minibuffer
https://github.com/minad/marginalia

Enable rich annotations using the Marginalia package.

#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src

* MINIBUFFER ESCAPE
By default, Emacs requires you to hit ESC three times to escape quit the minibuffer.  

#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.  For more information on what is available to configure in the Doom modeline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (line-number-mode -1)
  (setq doom-modeline-buffer-encoding nil
        doom-modeline-buffer-file-name-style 'relative-to-project
        doom-modeline-height 35
        doom-modeline-icon t
        doom-modeline-major-mode-color-icon t
        doom-modeline-major-mode-icon t
        doom-modeline-persp-name nil
        doom-modeline-persp-icon nil))
#+end_src

* MOVE WHERE I MEAN
https://github.com/alezost/mwim.el

This package allows you to move to the beginning/end of a line or code.

#+begin_src emacs-lisp
(use-package mwim
  :ensure t
  :config
  (setq mwim-beginning-of-line-function 'beginning-of-line
        mwim-end-of-line-function 'end-of-line))
#+end_src

* MULTIPLE CURSORS
https://github.com/magnars/multiple-cursors.el

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t)
#+end_src

* NERD ICONS
https://github.com/rainstormstudio/nerd-icons.el

#+begin_src emacs-lisp
(use-package nerd-icons
  :ensure t)
#+end_src

** Nerd Icons Completion
https://github.com/rainstormstudio/nerd-icons-completion

#+begin_src emacs-lisp
(use-package nerd-icons-completion
  :ensure t
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

** Nerd Icons Corfu
https://github.com/LuigiPiucco/nerd-icons-corfu

#+begin_src emacs-lisp
(use-package nerd-icons-corfu
  :ensure t
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)

  ;; Optionally:
  (setq nerd-icons-corfu-mapping
        '((array :style "cod" :icon "symbol_array" :face font-lock-type-face)
          (boolean :style "cod" :icon "symbol_boolean" :face font-lock-builtin-face)
          ;; ...
          (t :style "cod" :icon "code" :face font-lock-warning-face)))
  ;; Remember to add an entry for `t', the library uses that as default.
  )
#+end_src

** Nerd Icons Ibuffer
https://github.com/seagle0128/nerd-icons-ibuffer

#+begin_src emacs-lisp
(use-package nerd-icons-ibuffer
  :ensure t
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode)
  :config
  (setq nerd-icons-ibuffer-formats
        '((mark " "
                (icon 2 2)
                (name 50 50 :left :elide)
                " "
                project-file-relative)
          (mark " "
                (name 50 -1)
                " " filename))))
#+end_src

* NVM
https://github.com/rejeep/nvm.el

#+begin_src emacs-lisp
(use-package nvm
  :ensure (:host github :repo "rejeep/nvm.el")
  :config
  (nvm-use "22"))
#+end_src

* ORDERLESS
https://github.com/oantolin/orderless

#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

* ORG MODE
#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :hook (org-mode . org-indent-mode)
  :config
  (setq org-directory (expand-file-name "~/Nextcloud/Notes/"))
  (setq org-agenda-files (list (expand-file-name "~/Nextcloud/Notes/")))
  (setq org-complete-tags-always-offer-all-agenda-tags t)
  (add-hook 'org-mode-hook (lambda () (setq tab-width 8))))
#+end_src

** Enabling Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
  :ensure t
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :hook
  (org-mode . org-bullets-mode))
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a ~begin_src~ tag.  Other expansions available include:

#+begin_src org
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |
#+end_src

#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src

** Org TODO
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "WAIT" "HOLD" "DONE")))
#+end_src

** Org Appear
https://github.com/awth13/org-appear

#+begin_src emacs-lisp
(use-package org-appear
  :ensure t
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autoentities t
        org-appear-autosubmarkers t
        org-appear-autolinks t
        org-appear-autokeywords t
        org-appear-trigger 'on-change
        org-hide-emphasis-markers t
        org-link-descriptive t
        org-pretty-entities t))
#+end_src

** Org Roam
https://github.com/org-roam/org-roam
https://www.orgroam.com/

#+begin_src emacs-lisp
;; (use-package org-roam
;;   :ensure t
;;   :custom
;;   (org-roam-completion-everywhere t)
;;   (org-roam-directory (expand-file-name "~/Nextcloud/Notes/"))
;;   :bind (("C-c n l" . org-roam-buffer-toggle)
;;          ("C-c n f" . org-roam-node-find)
;;          ("C-c n g" . org-roam-graph)
;;          ("C-c n i" . org-roam-node-insert)
;;          ("C-c n c" . org-roam-capture)
;;          ;; Dailies
;;          ("C-c n j" . org-roam-dailies-capture-today))
;;   :config
;;   (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
;;   (org-roam-db-autosync-mode))
#+end_src

* PERSISTENT SCRATCH
https://github.com/Fanael/persistent-scratch

#+begin_src emacs-lisp
(use-package persistent-scratch
  :ensure t
  :config
  (persistent-scratch-setup-default))
#+end_src

* PERSP MODE
#+begin_quote
Currently using =tabspaces= instead of =persp-mode=.
#+end_quote

Using [[https://github.com/Bad-ptr/persp-mode.el][persp-mode]] which is a fork of [[https://github.com/nex3/perspective-el][perspective-el]].

#+begin_src emacs-lisp
;; (use-package persp-mode
;;   :ensure t
;;   :custom
;;   (persp-keymap-prefix (kbd "C-c w"))
;;   :init
;;   (persp-mode 1)
;;   :config
;;   (setq persp-autokill-buffer-on-remove 'kill-weak)
;;   ;; Sets a file to write to when we save states
;;   (setq persp-state-default-file "~/.config/emacs/sessions")
;;   (setq wg-morph-on nil))
#+end_src

** Persp Mode Projectile Bridge
#+begin_quote
Currently using =project.el= instead of =projectile=.
#+end_quote

#+begin_src emacs-lisp
;; (use-package persp-mode-projectile-bridge
;;   :ensure t
;;   ;; :after (persp-mode projectile)
;;   :hook
;;   ((persp-mode projectile) . (lambda () (persp-mode-projectile-bridge-mode 1)))
;;   ;; :config
;;   ;; (persp-mode-projectile-bridge-mode 1)
;;   :init
;;   (persp-mode-projectile-bridge-mode 1))
#+end_src

* POPWIN
https://github.com/emacsorphanage/popwin

#+begin_src emacs-lisp
(use-package popwin
  :ensure t
  :config
  (dolist (buffer '("*Flycheck errors*"
                    "*Org Links*"
                    "*Warnings*"
                    "*lsp-help*"
                    "*xref*"))
    (push buffer popwin:special-display-config))
  (popwin-mode 1))
#+end_src

* PROJECT
#+begin_src emacs-lisp
(setq project-file-history-behavior 'relativize
      project-mode-line t)
(setq project-switch-commands
      '((consult-project-buffer "Buffer" "b")
        (project-find-file "File" "f")
        (project-dired "Directory" "d")
        (magit-project-status "Magit" "m")
        (consult-ripgrep "ripgrep" "r")))
(setq project-vc-extra-root-markers '(".idea" ".project.el" ".projectile" "a.yaml" "package.json"))
#+end_src

** Project Tab Groups
https://github.com/fritzgrabo/project-tab-groups

#+begin_src emacs-lisp
(use-package project-tab-groups
  :ensure t)
#+end_src

* PROJECTILE
#+begin_quote
Currently using =project.el= instead of =projectile=.
#+end_quote

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.  It should be noted that many projectile commands do not work if you have set "fish" as the "shell-file-name" for Emacs. I had initially set "fish" as the "shell-file-name" in the Vterm section of this config, but oddly enough I changed it to "bin/sh" and projectile now works as expected, and Vterm still uses "fish" because my default user "sh" on my Linux system is "fish".

#+begin_src emacs-lisp
;; (use-package projectile
;;   :ensure t
;;   :config
;;   (projectile-mode 1)
;;   (setq projectile-project-search-path '(("~/.dotfiles" . 0) ("~/coding" . 1) ("~/src" . 1))))
#+end_src

* PROTOBUF
#+begin_src emacs-lisp
(use-package protobuf-mode
  :ensure t)
#+end_src

* RAINBOW DELIMITERS
Adding rainbow coloring to parentheses.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

* RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.  

#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure t
  :diminish
  :hook
  ((org-mode prog-mode) . rainbow-mode))
#+end_src

* RIPGREP
https://github.com/dajva/rg.el

#+begin_src emacs-lisp
(use-package rg
  :ensure t
  :config
  (setq rg-ignore-case 'smart))
#+end_src

* SANE DEFAULTS
The following settings are simple modes that are enabled (or disabled) so that Emacs functions more like you would expect a proper editor/IDE to function.

#+begin_src emacs-lisp
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
;; (electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
                           (setq-local electric-pair-inhibit-predicate
                                       `(lambda (c)
                                          (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(global-auto-revert-mode t)           ;; Automatically show changes if the file has changed
(global-display-line-numbers-mode -1) ;; Display line numbers
(global-visual-line-mode 1)           ;; Enable truncated lines
(global-visual-wrap-prefix-mode 1)    ;; Enable visual line wrapping
(menu-bar-mode -1)                    ;; Disable the menu bar
(save-place-mode 1)                   ;; Save the cursor position when a file is closed
(scroll-bar-mode -1)                  ;; Disable the scroll bar
;; (tab-bar-mode t)                      ;; Enable tab bar mode
(tool-bar-mode -1)                    ;; Disable the tool bar

(setopt use-short-answers t) ;; Since Emacs 29, `yes-or-no-p' will use `y-or-n-p'

(setq-default cursor-type '(bar . 2)) ;; Set the cursor to a bar
(setq-default indent-tabs-mode nil)
(setq-default line-spacing 0.12)

(setq calendar-week-start-day 1) ;; Set the calendar to start on Monday
(setq completion-cycle-threshold 3)
(setq desktop-restore-frames t)
(setq dired-kill-when-opening-new-dired-buffer t)
(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024))
(setq initial-major-mode 'text-mode)
(setq initial-scratch-message nil)
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
(setq save-place-file (concat user-emacs-directory ".emacs-places"))
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
(setq warning-minimum-level :error)
#+end_src

** Scroll
#+begin_src emacs-lisp
(setq mouse-wheel-follow-mouse 't
      mouse-wheel-progressive-speed nil
      mouse-wheel-scroll-amount '(1 ((shift) . 1))
        mouse-wheel-tilt-scroll t
      scroll-step 1)
#+end_src

** SSH Agent
#+begin_src emacs-lisp
{%@@ if profile == "ismd-work" @@%}
(setenv "SSH_AUTH_SOCK" "/home/ismd/.skotty/sock/default.sock")
{%@@ else @@%}
(setenv "SSH_AUTH_SOCK" "/run/user/1000/ssh-agent.socket")
{%@@ endif @@%}
#+end_src

** Tab Bar
#+begin_src emacs-lisp
(setq tab-always-indent t
      tab-bar-auto-width nil
      tab-bar-close-button-show nil
      tab-bar-format '(tab-bar-format-history tab-bar-format-tabs-groups tab-bar-separator tab-bar-format-add-tab)
      tab-bar-new-button-show nil
      tab-bar-new-tab-choice "*scratch*"
      tab-bar-new-tab-to 'rightmost
      tab-bar-tab-hints t)
#+end_src

** Tab Line
#+begin_src emacs-lisp
(defun ismd/get-project-file-buffers ()
  (project-buffers (project-current)))

(use-package tab-line
  :ensure nil
  :hook (elpaca-after-init-hook . global-tab-line-mode)
  :custom-face
  (tab-line-tab ((t (:inherit tab-line :box nil))))
  (tab-line-tab-current ((t (:inherit doom-modeline-buffer-file))))
  (tab-line-tab-group ((t (:inherit doom-modeline-project-name))))
  (tab-line-tab-inactive ((t (:inherit doom-modeline-buffer-minor-mode))))
  :config
  (setq tab-line-close-button-show nil
        tab-line-new-button-show nil
        ;; tab-line-separator ""
        tab-line-switch-cycling t
        tab-line-tab-name-function #'ismd/tab-line-name-buffer
        tab-line-tabs-buffer-group-function #'ismd/tab-line-tabs-buffer-group-by-project
        tab-line-tabs-buffer-group-sort-function #'ismd/tab-line-tabs-buffer-group-sort-by-creation-time
        tab-line-tabs-buffer-list-function #'ismd/tab-line-tabs-buffer-list
        tab-line-tabs-function #'tab-line-tabs-buffer-groups)

  (add-to-list 'tab-line-tab-face-functions #'tab-line-tab-face-group))

(defun ismd/tab-line-tabs-buffer-group-by-project (buffer)
  "Group buffers by project, excluding non-file buffers."
  (when (buffer-file-name buffer)
    (let ((group-name (tab-line-tabs-buffer-group-by-project buffer)))
      (when group-name
        (concat " " group-name " ")))))

(defun ismd/tab-line-tabs-buffer-list ()
  "Return buffer list without putting current buffer first."
  (seq-filter (lambda (b) (and (buffer-live-p b)
                               (/= (aref (buffer-name b) 0) ?\s)))
              (seq-uniq (append (mapcar #'car (window-prev-buffers))
                                (buffer-list)))))

(defvar buffer-creation-times (make-hash-table :test 'equal)
  "Hash table storing buffer creation times by buffer name.")

(defvar-local buffer-creation-time nil
  "Time when buffer was created.")

(defun track-buffer-creation ()
  "Set creation time for new buffers."
  (let ((buffer-key (buffer-file-name)))
    (when buffer-key
      (unless (gethash buffer-key buffer-creation-times)
        (puthash buffer-key (current-time) buffer-creation-times))
      (setq buffer-creation-time (gethash buffer-key buffer-creation-times)))))

(defun cleanup-buffer-creation-time ()
  "Remove creation time when buffer is killed."
  (let ((buffer-key (buffer-file-name)))
    (when buffer-key
      (remhash buffer-key buffer-creation-times))))

(add-hook 'find-file-hook #'track-buffer-creation)
(add-hook 'buffer-list-update-hook #'track-buffer-creation)
(add-hook 'kill-buffer-hook #'cleanup-buffer-creation-time)

(defun ismd/tab-line-tabs-buffer-group-sort-by-creation-time (a b)
  "Sort buffers by creation time (oldest first)."
  (let ((time-a (buffer-local-value 'buffer-creation-time a))
        (time-b (buffer-local-value 'buffer-creation-time b)))
    (and time-a time-b (time-less-p time-a time-b))))

(defcustom tab-line-tab-min-width 10
  "Minimum width of a tab in characters."
  :type 'integer
  :group 'tab-line)

(defcustom tab-line-tab-max-width 30
  "Maximum width of a tab in characters."
  :type 'integer
  :group 'tab-line)

(defun ismd/tab-line-name-buffer (buffer &rest _buffers)
  "Create name for tab with padding and truncation.
If buffer name is shorter than `tab-line-tab-max-width' it gets
centered with spaces, otherwise it is truncated, to preserve
equal width for all tabs.  This function also tries to fit as
many tabs in window as possible, so if there are no room for tabs
with maximum width, it calculates new width for each tab and
truncates text if needed.  Minimal width can be set with
`tab-line-tab-min-width' variable."
  (with-current-buffer buffer
    (let* ((window-width (window-width (get-buffer-window)))
           (tab-amount (length (tab-line-tabs-window-buffers)))
           (window-max-tab-width (if (>= (* (+ tab-line-tab-max-width 3) tab-amount) window-width)
                                     (/ window-width tab-amount)
                                   tab-line-tab-max-width))
           (tab-width (- (cond ((> window-max-tab-width tab-line-tab-max-width)
                                tab-line-tab-max-width)
                               ((< window-max-tab-width tab-line-tab-min-width)
                                tab-line-tab-min-width)
                               (t window-max-tab-width))
                         3)) ;; compensation for ' x ' button
           (buffer-name (string-trim (buffer-name)))
           (name-width (length buffer-name)))
      (if (>= name-width tab-width)
          (concat  " " (truncate-string-to-width buffer-name (- tab-width 2)) "…")
        (concat " " buffer-name " ")))))
#+end_src

* SHELLS AND TERMINALS
In my configs, all of my shells (bash, fish, zsh and the ESHELL) require my shell-color-scripts-git package to be installed.  On Arch Linux, you can install it from the AUR.  Otherwise, go to my shell-color-scripts repository on GitLab to get it.

** Eshell
Eshell is an Emacs 'shell' that is written in Elisp.

#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :ensure t
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
;; eshell-aliases-file -- sets an aliases file for the eshell.

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

** Vterm
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :hook (vterm-mode . (lambda () (display-line-numbers-mode -1)))
  :config
  (setq shell-file-name "/bin/fish"
        vterm-max-scrollback 5000))
#+end_src

** Vterm Toggle 
[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.

#+begin_src emacs-lisp
(use-package vterm-toggle
  :ensure t
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 ;;(display-buffer-reuse-window display-buffer-in-direction)
                 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                 ;;(direction . bottom)
                 ;;(dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.3))))
#+end_src

* STARTING THE DAEMON
#+begin_src emacs-lisp
(server-start)
#+end_src

* SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+begin_src emacs-lisp
(use-package sudo-edit
  :ensure t)
#+end_src

* SUPER SAVE
https://github.com/bbatsov/super-save

#+begin_src emacs-lisp
(use-package super-save
  :ensure t
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t)
  (setq auto-save-default nil)
  (setq super-save-silent t))
#+end_src

* TABSPACES
https://github.com/mclear-tools/tabspaces

#+begin_src emacs-lisp
;; (use-package tabspaces
;;   :ensure t
;;   :after consult
;;   :hook (elpaca-after-init . tabspaces-mode)
;;   :commands (tabspaces-switch-or-create-workspace
;;              tabspaces-open-or-create-project-and-workspace)
;;   :custom
;;   (tabspaces-use-filtered-buffers-as-default t)
;;   (tabspaces-default-tab "Default")
;;   (tabspaces-remove-to-default t)
;;   (tabspaces-include-buffers '("*scratch*"))
;;   (tabspaces-initialize-project-with-todo nil)
;;   ;; sessions
;;   ;; (tabspaces-session t)
;;   ;; (tabspaces-session-auto-restore t)
;;   :config
;;   (setq tabspaces-project-switch-commands
;;         '((project-find-file "File" "f")
;;           (project-dired "Directory" "d")
;;           (magit-project-status "Magit" "m")
;;           (consult-ripgrep "ripgrep" "r")))

;;   ;; Filter Buffers for Consult-Buffer

;;   (with-eval-after-load 'consult
;;   ;; hide full buffer list (still available with "b" prefix)
;;   (consult-customize consult--source-buffer :hidden t :default nil)
;;   ;; set consult-workspace buffer list
;;   (defvar consult--source-workspace
;;     (list :name     "Workspace Buffers"
;;           :narrow   ?w
;;           :history  'buffer-name-history
;;           :category 'buffer
;;           :state    #'consult--buffer-state
;;           :default  t
;;           :items    (lambda () (consult--buffer-query
;;                            :predicate #'tabspaces--local-buffer-p
;;                            :sort 'visibility
;;                            :as #'buffer-name)))

;;     "Set workspace buffer list for consult-buffer.")
;;   (add-to-list 'consult-buffer-sources 'consult--source-workspace)))
#+end_src

* TLDR
#+begin_src emacs-lisp
(use-package tldr
  :ensure t)
#+end_src

* TRANSPARENCY
With Emacs version 29, true transparency has been added.  

#+begin_src emacs-lisp
;; (add-to-list 'default-frame-alist '(alpha-background . 80))
#+end_src

* TREE SITTER
Before Emacs 29, tree-sitter was a [[https://emacs-tree-sitter.github.io/][package]] that could be installed. With Emacs 29, tree-sitter is built-in in package =treesit.el=.

** Treesit Auto
#+begin_src emacs-lisp
(use-package treesit-auto
  :ensure t
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src

** Treesit Fold
https://github.com/emacs-tree-sitter/treesit-fold

#+begin_src emacs-lisp
(use-package treesit-fold
  :ensure (:host github :repo "emacs-tree-sitter/treesit-fold")
  :custom
  (treesit-fold-line-count-format (concat (truncate-string-ellipsis) " %d lines " (truncate-string-ellipsis)))
  (treesit-fold-line-count-show t)
  :config
  (global-treesit-fold-mode 1)
  (global-treesit-fold-indicators-mode 1))
#+end_src

* TREEMACS
https://github.com/Alexander-Miller/treemacs

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :hook
  (treemacs-mode . (lambda ()
                     (display-line-numbers-mode -1)
                     (visual-line-mode -1)))
  :config
  (progn
    (setq treemacs-select-when-already-in-treemacs 'stay)
    (setq treemacs-width 30)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil)))

(use-package treemacs-nerd-icons
  :ensure t
  :after (treemacs lsp-treemacs nerd-icons)
  :config
  (treemacs-load-theme "nerd-icons"))

(use-package treemacs-magit
  :ensure t
  :after (treemacs magit))

;; Treemacs stops selecting window after change file with this package enabled
;; (use-package treemacs-tab-bar
;;   :ensure t
;;   :after (treemacs)
;;   :config (treemacs-set-scope-type 'Tabs))
#+end_src

* TRIMMING WHITESPACE
#+begin_src emacs-lisp
(use-package ws-butler
  :ensure t
  :config
  (ws-butler-global-mode 1) 
  (setq ws-butler-global-exempt-modes '(dockerfile-ts-mode markdown-mode terraform-mode)))
#+end_src

* VERTICO
https://github.com/minad/vertico

vertico.el - VERTical Interactive COmpletion

#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :demand t
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :ensure nil
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :ensure nil
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

** Vertico Posframe
https://github.com/tumashu/vertico-posframe

#+begin_src emacs-lisp
;; (use-package vertico-posframe
;;   :ensure t
;;   :config
;;   (vertico-posframe-mode 1)
;;   (setq vertico-posframe-border-width 2
;;         vertico-posframe-parameters '((left-fringe . 8) (right-fringe . 8))
;;     vertico-posframe-poshandler 'posframe-poshandler-frame-top-center)
;;   (set-face-attribute 'vertico-posframe-border nil :background "#b0bec5"))
#+end_src

* VUIET
https://github.com/mihaiolteanu/vuiet

#+begin_src emacs-lisp
(use-package vuiet
  :ensure t
  :after lastfm
  :custom
  (vuiet-update-mode-line-interval 1))
#+end_src

** Last.fm
https://github.com/mihaiolteanu/lastfm.el

#+begin_src emacs-lisp
(use-package lastfm
  :ensure t)
#+end_src

* XREF
#+begin_src emacs-lisp
(use-package xref
  :ensure t
  :hook
  (xref--xref-buffer-mode . (lambda () (display-line-numbers-mode -1))))
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :diminish
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit nil
        which-key-separator " → " ))
#+end_src

* WINDOW MANAGEMENT
#+begin_src emacs-lisp
(defun ismd/window-split-toggle ()
  "Toggle between horizontal and vertical split with two windows."
  (interactive)
  (if (> (length (window-list)) 2)
      (error "Can't toggle with more than 2 windows")
    (let ((func (if (window-full-height-p)
                    #'split-window-vertically
                  #'split-window-horizontally)))
      (delete-other-windows)
      (funcall func)
      (save-selected-window
        (other-window 1)
        (switch-to-buffer (other-buffer))))))
#+end_src

* WINDOW NUMBERING
https://github.com/deb0ch/emacs-winum

#+begin_src emacs-lisp
(defun ismd/winum-assign-0-to-dirvish-side ()
  (when (string-match-p "Dired by name" (format-mode-line mode-name)) 0))

(use-package winum
  :ensure t
  :config
  (add-to-list 'winum-assign-functions #'ismd/winum-assign-0-to-dirvish-side)

  (setq winum-auto-assign-0-to-minibuffer t
        winum-scope 'frame-local)
  (winum-mode))
#+end_src

* WORKSPACES
https://github.com/pashinin/workgroups2

#+begin_src emacs-lisp
;; (use-package workgroups2
;;   :ensure t
;;   :config
;;   (setq wg-prefix-key (kbd "C-c w"))
;;   (setq wg-session-file "~/.config/emacs/workgroups")
;;   (setq wg-emacs-exit-save-behavior           'save)      ; Options: 'save 'ask nil
;;   (setq wg-workgroups-mode-exit-save-behavior 'save)      ; Options: 'save 'ask nil
;;   (setq wg-morph-on nil)
;;   (workgroups-mode 1))
#+end_src
